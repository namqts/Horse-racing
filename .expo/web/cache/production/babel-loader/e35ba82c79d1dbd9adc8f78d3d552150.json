{"ast":null,"code":"'use strict';import invariant from'fbjs/lib/invariant';var EventSubscriptionVendor=function(){function EventSubscriptionVendor(){this._subscriptionsForType={};}var _proto=EventSubscriptionVendor.prototype;_proto.addSubscription=function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;};_proto.removeAllSubscriptions=function removeAllSubscriptions(eventType){if(eventType==null){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}};_proto.removeSubscription=function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}};_proto.getSubscriptionsForType=function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];};return EventSubscriptionVendor;}();export default EventSubscriptionVendor;","map":{"version":3,"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","_proto","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"sources":["D:/Horse-racing/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"],"mappings":"AASA,YAAY,CAEZ,MAAOA,UAAS,KAAM,oBAAoB,CAM1C,GAAIC,wBAAuB,CAAgB,UAAY,CACrD,QAASA,wBAAuB,EAAG,CACjC,IAAI,CAACC,qBAAqB,CAAG,CAAC,CAAC,CACjC,CASA,GAAIC,OAAM,CAAGF,uBAAuB,CAACG,SAAS,CAE9CD,MAAM,CAACE,eAAe,CAAG,QAASA,gBAAe,CAACC,SAAS,CAAEC,YAAY,CAAE,CACzEP,SAAS,CAACO,YAAY,CAACC,UAAU,GAAK,IAAI,CAAE,wDAAwD,CAAC,CAErG,GAAI,CAAC,IAAI,CAACN,qBAAqB,CAACI,SAAS,CAAC,CAAE,CAC1C,IAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC,CAAG,EAAE,CAC5C,CAEA,GAAIG,IAAG,CAAG,IAAI,CAACP,qBAAqB,CAACI,SAAS,CAAC,CAACI,MAAM,CAEtD,IAAI,CAACR,qBAAqB,CAACI,SAAS,CAAC,CAACK,IAAI,CAACJ,YAAY,CAAC,CAExDA,YAAY,CAACD,SAAS,CAAGA,SAAS,CAClCC,YAAY,CAACE,GAAG,CAAGA,GAAG,CACtB,MAAOF,aAAY,CACrB,CAAC,CASDJ,MAAM,CAACS,sBAAsB,CAAG,QAASA,uBAAsB,CAACN,SAAS,CAAE,CACzE,GAAIA,SAAS,EAAI,IAAI,CAAE,CACrB,IAAI,CAACJ,qBAAqB,CAAG,CAAC,CAAC,CACjC,CAAC,IAAM,CACL,MAAO,KAAI,CAACA,qBAAqB,CAACI,SAAS,CAAC,CAC9C,CACF,CAAC,CASDH,MAAM,CAACU,kBAAkB,CAAG,QAASA,mBAAkB,CAACN,YAAY,CAAE,CACpE,GAAID,UAAS,CAAGC,YAAY,CAACD,SAAS,CACtC,GAAIG,IAAG,CAAGF,YAAY,CAACE,GAAG,CAC1B,GAAIK,qBAAoB,CAAG,IAAI,CAACZ,qBAAqB,CAACI,SAAS,CAAC,CAEhE,GAAIQ,oBAAoB,CAAE,CACxB,MAAOA,qBAAoB,CAACL,GAAG,CAAC,CAClC,CACF,CAAC,CAeDN,MAAM,CAACY,uBAAuB,CAAG,QAASA,wBAAuB,CAACT,SAAS,CAAE,CAC3E,MAAO,KAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC,CAC9C,CAAC,CAED,MAAOL,wBAAuB,CAChC,CAAC,EAAE,CAEH,cAAeA,wBAAuB"},"metadata":{},"sourceType":"module"}