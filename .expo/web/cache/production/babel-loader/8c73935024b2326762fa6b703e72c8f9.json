{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"align\",\"justify\",\"wrap\",\"basis\",\"grow\",\"shrink\",\"direction\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Flex=function Flex(props,ref){var _usePropsResolution=usePropsResolution('Flex',props),align=_usePropsResolution.align,justify=_usePropsResolution.justify,wrap=_usePropsResolution.wrap,basis=_usePropsResolution.basis,grow=_usePropsResolution.grow,shrink=_usePropsResolution.shrink,direction=_usePropsResolution.direction,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},resolvedProps,{flexDirection:direction||resolvedProps.flexDirection,alignItems:align||resolvedProps.alignItems,justifyContent:justify||resolvedProps.justifyContent,flexGrow:grow||resolvedProps.flexGrow,flexBasis:basis||resolvedProps.flexBasis,flexShrink:shrink||resolvedProps.flexShrink,flexWrap:wrap||resolvedProps.flexWrap,ref:ref}));};export var Spacer=function Spacer(props){var resolvedProps=usePropsResolution('Spacer',props);return React.createElement(Box,resolvedProps);};export default memo(forwardRef(Flex));","map":{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","Flex","props","ref","align","justify","wrap","basis","grow","shrink","direction","resolvedProps","flexDirection","alignItems","justifyContent","flexGrow","flexBasis","flexShrink","flexWrap","Spacer"],"mappings":"ybAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,IAAP,cAEA,OAASC,kBAAT,oCACA,OAASC,qBAAT,4CAEA,GAAMC,KAAI,CAAG,QAAPA,KAAI,CAAIC,KAAD,CAAoBC,GAApB,CAAiC,CAC5C,wBASIJ,kBAAkB,CAAC,MAAD,CAASG,KAAT,CAVsB,CAE1CE,KADI,qBACJA,KADI,CAEJC,OAFI,qBAEJA,OAFI,CAGJC,IAHI,qBAGJA,IAHI,CAIJC,KAJI,qBAIJA,KAJI,CAKJC,IALI,qBAKJA,IALI,CAMJC,MANI,qBAMJA,MANI,CAOJC,SAPI,qBAOJA,SAPI,CAQDC,aAAAA,yDAIL,GAAIX,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,MAAA,CAAA,aAAA,CAAC,GAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMS,aADN,CAAA,CAEE,aAAa,CAAED,SAAS,EAAIC,aAAa,CAACC,aAF5C,CAGE,UAAU,CAAER,KAAK,EAAIO,aAAa,CAACE,UAHrC,CAIE,cAAc,CAAER,OAAO,EAAIM,aAAa,CAACG,cAJ3C,CAKE,QAAQ,CAAEN,IAAI,EAAIG,aAAa,CAACI,QALlC,CAME,SAAS,CAAER,KAAK,EAAII,aAAa,CAACK,SANpC,CAOE,UAAU,CAAEP,MAAM,EAAIE,aAAa,CAACM,UAPtC,CAQE,QAAQ,CAAEX,IAAI,EAAIK,aAAa,CAACO,QARlC,CASE,GAAG,CAAEf,GATP,CAAA,CAAA,CADF,CAaD,CA9BD,CAiCA,MAAO,IAAMgB,OAAM,CAAIjB,QAAViB,OAAM,CAAIjB,KAAD,CAAgB,CACpC,GAAMS,cAAa,CAAGZ,kBAAkB,CAAC,QAAD,CAAWG,KAAX,CAAxC,CAEA,MAAO,MAAA,CAAA,aAAA,CAAC,GAAD,CAASS,aAAT,CAAP,CACD,CAJM,CAOP,cAAef,KAAI,CAACC,UAAU,CAACI,IAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IFlexProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props: IFlexProps, ref: any) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      flexDirection={direction || resolvedProps.flexDirection}\n      alignItems={align || resolvedProps.alignItems}\n      justifyContent={justify || resolvedProps.justifyContent}\n      flexGrow={grow || resolvedProps.flexGrow}\n      flexBasis={basis || resolvedProps.flexBasis}\n      flexShrink={shrink || resolvedProps.flexShrink}\n      flexWrap={wrap || resolvedProps.flexWrap}\n      ref={ref}\n    />\n  );\n};\n\n//Spacer Component that adds space between components where it is placed\nexport const Spacer = (props: any) => {\n  const resolvedProps = usePropsResolution('Spacer', props);\n\n  return <Box {...resolvedProps} />;\n};\n\nexport type { IFlexProps };\nexport default memo(forwardRef(Flex));\n"]},"metadata":{},"sourceType":"module"}