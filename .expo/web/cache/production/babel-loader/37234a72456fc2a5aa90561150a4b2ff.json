{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"];import React from'react';function createContext(rootComponentName){var Context=React.createContext(null);function Provider(props){var children=props.children,providerProps=_objectWithoutProperties(props,_excluded);var value=React.useMemo(function(){return providerProps;},Object.values(providerProps));return React.createElement(Context.Provider,{value:value},children);}function useContext(consumerName){var context=React.useContext(Context);if(context===null){throw new Error(\"`\".concat(consumerName,\"` must be used within `\").concat(rootComponentName,\"`\"));}return context;}Provider.displayName=rootComponentName+'Provider';return[Provider,useContext];}export{createContext};","map":{"version":3,"sources":["createContext.tsx"],"names":["React","createContext","rootComponentName","Context","Provider","props","children","providerProps","value","useMemo","Object","values","useContext","consumerName","context","Error","displayName"],"mappings":"gHAAA,MAAOA,MAAP,KAAkB,OAAlB,CAEA,QAASC,cAAT,CACEC,iBADF,CAEE,CACA,GAAMC,QAAO,CAAGH,KAAK,CAACC,aAAND,CAAsC,IAAtCA,CAAhB,CAEA,QAASI,SAAT,CAAkBC,KAAlB,CAA2E,CACzE,GAAQC,SAAF,CAAiCD,KADkC,CACjEC,QAAF,CAAeC,aAAAA,0BAAkBF,KADkC,YAGzE,GAAMG,MAAK,CAAGR,KAAK,CAACS,OAANT,CACZ,iBAAMO,cADMP,GAGZU,MAAM,CAACC,MAAPD,CAAcH,aAAdG,CAHYV,CAAd,CAKA,MAAO,MAAA,CAAA,aAAA,CAAC,OAAD,CAAS,QAAT,CAAA,CAAkB,KAAK,CAAEQ,KAAzB,CAAA,CAAiCF,QAAjC,CAAP,CACD,CAED,QAASM,WAAT,CAAoBC,YAApB,CAA0C,CACxC,GAAMC,QAAO,CAAGd,KAAK,CAACY,UAANZ,CAAiBG,OAAjBH,CAAhB,CACA,GAAIc,OAAO,GAAK,IAAhB,CAAsB,CACpB,KAAM,IAAIC,MAAJ,CAAA,GAAA,CAAA,MAAA,CACCF,YADD,CAAA,yBAAA,CAAA,CAAA,MAAA,CACyCX,iBADzC,CAAA,GAAA,CAAA,CAAN,CAGD,CACD,MAAOY,QAAP,CACD,CAEDV,QAAQ,CAACY,WAATZ,CAAuBF,iBAAiB,CAAG,UAA3CE,CACA,MAAO,CAACA,QAAD,CAAWQ,UAAX,CAAP,CACD,CAED,OAASX,aAAT","sourcesContent":["import React from 'react';\n\nfunction createContext<ContextValueType extends object>(\n  rootComponentName: string\n) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(\n        `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\n      );\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]},"metadata":{},"sourceType":"module"}