{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"disabled\",\"isDisabled\",\"isInvalid\",\"isChecked\",\"defaultIsChecked\",\"accessibilityLabel\",\"accessibilityHint\",\"onToggle\",\"value\",\"onValueChange\",\"isHovered\"],_excluded2=[\"onTrackColor\",\"offTrackColor\",\"onThumbColor\",\"offThumbColor\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{useToggleState}from'@react-stately/toggle';import RNSwitch from\"react-native-web/dist/exports/Switch\";import isNil from'lodash.isnil';import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useToken}from\"../../../hooks\";import{makeStyledComponent}from\"../../../utils/styled\";import{mergeRefs}from\"../../../utils\";import{useHover}from'@react-native-aria/interactions';import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useFormControlContext}from\"../../composites/FormControl\";import{combineContextAndProps}from\"../../../utils\";var StyledNBSwitch=makeStyledComponent(RNSwitch);var Switch=function Switch(_ref2,ref){var disabled=_ref2.disabled,isDisabled=_ref2.isDisabled,isInvalid=_ref2.isInvalid,isChecked=_ref2.isChecked,defaultIsChecked=_ref2.defaultIsChecked,accessibilityLabel=_ref2.accessibilityLabel,accessibilityHint=_ref2.accessibilityHint,onToggle=_ref2.onToggle,value=_ref2.value,_onValueChange=_ref2.onValueChange,isHoveredProp=_ref2.isHovered,props=_objectWithoutProperties(_ref2,_excluded);var formControlContext=useFormControlContext();var combinedProps=combineContextAndProps(formControlContext,props);var state=useToggleState({defaultSelected:!isNil(defaultIsChecked)?defaultIsChecked:false});var checked=!isNil(isChecked)?isChecked:state.isSelected;var _ref=React.useRef(null);var _useHover=useHover({},_ref),isHovered=_useHover.isHovered;var _usePropsResolution=usePropsResolution('Switch',props,{isHovered:isHoveredProp||isHovered,isDisabled:disabled||isDisabled||combinedProps.isDisabled,isInvalid:isInvalid||combinedProps.isInvalid,isChecked:checked}),_onTrackColor=_usePropsResolution.onTrackColor,_offTrackColor=_usePropsResolution.offTrackColor,_onThumbColor=_usePropsResolution.onThumbColor,_offThumbColor=_usePropsResolution.offThumbColor,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var onTrackColor=useToken('colors',_onTrackColor);var offTrackColor=useToken('colors',_offTrackColor);var onThumbColor=useToken('colors',_onThumbColor);var offThumbColor=useToken('colors',_offThumbColor);if(useHasResponsiveProps(_objectSpread(_objectSpread({},props),{},{isDisabled:isDisabled,isInvalid:isInvalid,isChecked:isChecked,defaultIsChecked:defaultIsChecked,accessibilityLabel:accessibilityLabel,accessibilityHint:accessibilityHint}))){return null;}return React.createElement(StyledNBSwitch,_extends({accessibilityLabel:accessibilityLabel,accessibilityHint:accessibilityHint,trackColor:{false:offTrackColor,true:onTrackColor},thumbColor:checked?onThumbColor:offThumbColor,activeThumbColor:onThumbColor,ios_backgroundColor:offTrackColor},resolvedProps,{disabled:disabled||isDisabled||combinedProps.isDisabled,onValueChange:function onValueChange(val){_onValueChange&&_onValueChange(val);onToggle?onToggle(val):state.toggle();},value:value||checked,ref:mergeRefs([ref,_ref])}));};export default memo(forwardRef(Switch));","map":{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","useToggleState","isNil","usePropsResolution","useToken","makeStyledComponent","mergeRefs","useHover","useHasResponsiveProps","useFormControlContext","combineContextAndProps","StyledNBSwitch","RNSwitch","Switch","disabled","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","onToggle","value","onValueChange","isHovered","isHoveredProp","props","ref","formControlContext","combinedProps","state","defaultSelected","checked","isSelected","_ref","useRef","onTrackColor","_onTrackColor","offTrackColor","_offTrackColor","onThumbColor","_onThumbColor","offThumbColor","_offThumbColor","resolvedProps","false","true","val","toggle"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    isHovered: isHoveredProp,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle(val) : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]},"metadata":{},"sourceType":"module"}