{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectDestructuringEmpty from\"@babel/runtime/helpers/objectDestructuringEmpty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import get from'lodash.get';import isNil from'lodash.isnil';import mergeWith from'lodash.mergewith';import cloneDeep from'lodash.clonedeep';import{themePropertyMap}from\"./../../theme/base\";import{getClosestBreakpoint,findLastValidBreakpoint,hasValidBreakpointFormat,extractInObject}from\"./../../theme/tools\";import{useContrastText}from\"../useContrastText\";export function extractProps(props,theme,_ref,componentTheme,currentBreakpoint){_objectDestructuringEmpty(_ref);var newProps={};for(var property in props){if(themePropertyMap[property]){var propValues=extractPropertyFromFunction(property,props,theme,componentTheme);if(typeof propValues==='string'||typeof propValues==='number'){newProps[property]=propValues;}else if(!isNil(propValues)){for(var nestedProp in propValues){newProps[nestedProp]=get(theme,\"\".concat(themePropertyMap[nestedProp],\".\").concat(propValues[nestedProp]),propValues[nestedProp]);}}else if(property==='shadow'){var shadowProps=theme[themePropertyMap[property]][props[property]];if(!isNil(shadowProps)){newProps=_objectSpread(_objectSpread({},newProps),shadowProps);}}else{newProps[property]=resolveValueWithBreakpoint(props[property],theme.breakpoints,currentBreakpoint,property);}}else{newProps[property]=resolveValueWithBreakpoint(props[property],theme.breakpoints,currentBreakpoint,property);}}return cloneDeep(newProps);}function filterDefaultProps(props,defaultProps){var _extractInObject=extractInObject(defaultProps,Object.keys(props)),_extractInObject2=_slicedToArray(_extractInObject,2),resultProps=_extractInObject2[1];return resultProps;}export var extractPropertyFromFunction=function extractPropertyFromFunction(property,props,theme,componentTheme){var propValues;if(componentTheme&&typeof componentTheme[themePropertyMap[property]]==='function'){var funcProps=componentTheme[themePropertyMap[property]](_objectSpread({theme:theme},props));var isNested=Object.keys(funcProps).some(function(key){return funcProps[key]&&typeof funcProps[key]==='object';});propValues=isNested?_objectSpread({},get(funcProps,\"\".concat(props[property]))):_objectSpread({},funcProps);}else{propValues=get(componentTheme,\"\".concat(themePropertyMap[property],\".\").concat(props[property]));}return propValues;};export function mergeUnderscoreProps(newProps,props){var _props=Object.keys(newProps).filter(function(propName){return propName.startsWith('_');});_props.forEach(function(propName){var _newProps$bg,_newProps$propName$co,_newProps$propName,_props$propName;var bg=(_newProps$bg=newProps.bg)!==null&&_newProps$bg!==void 0?_newProps$bg:newProps.backgroundColor;var textColor=bg?{color:useContrastText(bg,(_newProps$propName$co=(_newProps$propName=newProps[propName])===null||_newProps$propName===void 0?void 0:_newProps$propName.color)!==null&&_newProps$propName$co!==void 0?_newProps$propName$co:(_props$propName=props[propName])===null||_props$propName===void 0?void 0:_props$propName.color)}:{};newProps[propName]=_objectSpread(_objectSpread(_objectSpread({},textColor),newProps[propName]),props[propName]);});return newProps;}export var resolveValueWithBreakpoint=function resolveValueWithBreakpoint(values,breakpointTheme,currentBreakpoint,property){if(hasValidBreakpointFormat(values,breakpointTheme,property)){return findLastValidBreakpoint(values,breakpointTheme,currentBreakpoint);}else{return values;}};export function calculateProps(theme,colorModeProps,componentTheme,props,windowWidth){var currentBreakpoint=getClosestBreakpoint(theme.breakpoints,windowWidth);if(!props){props={};}var newProps;if(componentTheme){newProps=extractProps(filterDefaultProps(props,componentTheme.defaultProps),theme,colorModeProps,componentTheme,currentBreakpoint);var componentBaseStyle=typeof componentTheme.baseStyle!=='function'?componentTheme.baseStyle:componentTheme.baseStyle(_objectSpread(_objectSpread(_objectSpread({theme:theme},newProps),props),colorModeProps));newProps=mergeWith(newProps,componentBaseStyle,function(objValue,srcValue,key){if(!isNil(objValue)){delete newProps[key];}});var variant=props.variant||get(componentTheme,'defaultProps.variant');if(variant&&componentTheme.variants&&componentTheme.variants[variant]){var colorScheme=props.colorScheme||get(componentTheme,'defaultProps.colorScheme');var variantProps=componentTheme.variants[variant](_objectSpread(_objectSpread(_objectSpread({},props),newProps),{},{colorScheme:colorScheme,theme:theme},colorModeProps));variantProps=extractProps(variantProps,theme,colorModeProps,componentTheme,currentBreakpoint);newProps=mergeWith(newProps,variantProps,function(objValue,srcValue,key){if(!isNil(objValue)){delete newProps[key];}});delete newProps.variant;delete newProps.colorScheme;}}var extractedProps=extractProps(props,theme,colorModeProps,componentTheme,currentBreakpoint);newProps=mergeWith(newProps,extractedProps,function(objValue,srcValue,key){if(!isNil(objValue)){delete newProps[key];}});newProps=mergeUnderscoreProps(newProps,props);return newProps;}","map":{"version":3,"sources":["utils.ts"],"names":["get","isNil","mergeWith","cloneDeep","themePropertyMap","getClosestBreakpoint","findLastValidBreakpoint","hasValidBreakpointFormat","extractInObject","useContrastText","extractProps","props","theme","componentTheme","currentBreakpoint","newProps","property","propValues","extractPropertyFromFunction","nestedProp","shadowProps","resolveValueWithBreakpoint","breakpoints","filterDefaultProps","defaultProps","resultProps","Object","keys","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","bg","backgroundColor","textColor","color","values","breakpointTheme","calculateProps","colorModeProps","windowWidth","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"mappings":"g+BAAA,MAAOA,IAAP,KAAgB,YAAhB,CACA,MAAOC,MAAP,KAAkB,cAAlB,CACA,MAAOC,UAAP,KAAsB,kBAAtB,CACA,MAAOC,UAAP,KAAsB,kBAAtB,CACA,OAASC,gBAAT,0BACA,OACEC,oBADF,CAEEC,uBAFF,CAGEC,wBAHF,CAIEC,eAJF,2BAMA,OAASC,eAAT,0BAcA,MAAO,SAASC,aAAT,CACLC,KADK,CAELC,KAFK,MAILC,cAJK,CAKLC,iBALK,CAML,iCACA,GAAIC,SAAa,CAAG,CAAA,CAApB,CACA,IAAK,GAAIC,SAAT,GAAqBL,MAArB,CAA4B,CAE1B,GAAIP,gBAAgB,CAACY,QAAD,CAApB,CAAgC,CAC9B,GAAIC,WAAU,CAAGC,2BAA2B,CAC1CF,QAD0C,CAE1CL,KAF0C,CAG1CC,KAH0C,CAI1CC,cAJ0C,CAA5C,CAMA,GAAI,MAAOI,WAAP,GAAsB,QAAtB,EAAkC,MAAOA,WAAP,GAAsB,QAA5D,CAAsE,CACpEF,QAAQ,CAACC,QAAD,CAARD,CAAqBE,UAArBF,CACD,CAFD,IAEO,IAAI,CAACd,KAAK,CAACgB,UAAD,CAAV,CAAwB,CAC7B,IAAK,GAAIE,WAAT,GAAuBF,WAAvB,CAAmC,CACjCF,QAAQ,CAACI,UAAD,CAARJ,CAAuBf,GAAG,CACxBY,KADwB,CAAA,EAAA,CAAA,MAAA,CAErBR,gBAAgB,CAACe,UAAD,CAFK,CAAA,GAAA,CAAA,CAAA,MAAA,CAEWF,UAAU,CAACE,UAAD,CAFrB,CAAA,CAGxBF,UAAU,CAACE,UAAD,CAHc,CAA1BJ,CAKD,CACF,CARM,IAQA,IAAIC,QAAQ,GAAK,QAAjB,CAA2B,CAChC,GAAII,YAAW,CAAGR,KAAK,CAACR,gBAAgB,CAACY,QAAD,CAAjB,CAALJ,CAAkCD,KAAK,CAACK,QAAD,CAAvCJ,CAAlB,CACA,GAAI,CAACX,KAAK,CAACmB,WAAD,CAAV,CAAyB,CACvBL,QAAQ,gCAAQA,QAAL,EAAkBK,WAAAA,CAA7BL,CACD,CACF,CALM,IAKA,CACLA,QAAQ,CAACC,QAAD,CAARD,CAAqBM,0BAA0B,CAC7CV,KAAK,CAACK,QAAD,CADwC,CAE7CJ,KAAK,CAACU,WAFuC,CAG7CR,iBAH6C,CAI7CE,QAJ6C,CAA/CD,CAMD,CACF,CA9BD,IA8BO,CACLA,QAAQ,CAACC,QAAD,CAARD,CAAqBM,0BAA0B,CAC7CV,KAAK,CAACK,QAAD,CADwC,CAE7CJ,KAAK,CAACU,WAFuC,CAG7CR,iBAH6C,CAI7CE,QAJ6C,CAA/CD,CAMD,CACF,CACD,MAAOZ,UAAS,CAACY,QAAD,CAAhB,CACD,CAKD,QAASQ,mBAAT,CAA4BZ,KAA5B,CAAwCa,YAAxC,CAA2D,CACzD,qBAAsBhB,eAAe,CAACgB,YAAD,CAAeE,MAAM,CAACC,IAAPD,CAAYf,KAAZe,CAAf,CAArC,sDAAOD,WAAH,sBACJ,MAAOA,YAAP,CACD,CAWD,MAAO,IAAMP,4BAA2B,CAAG,QAA9BA,4BAA2B,CACtCF,QADyC,CAEzCL,KAFyC,CAGzCC,KAHyC,CAIzCC,cAJyC,CAKtC,CACH,GAAII,WADD,CAGH,GACEJ,cAAc,EACd,MAAOA,eAAc,CAACT,gBAAgB,CAACY,QAAD,CAAjB,CAArB,GAAsD,UAFxD,CAGE,CACA,GAAIY,UAAS,CAAG,cAAc,CAACxB,gBAAgB,CAACY,QAAD,CAAjB,CAAd,gBACdJ,KADyD,CACzDA,KADyD,EAEtDD,KAAAA,EAHL,CAMA,GAAIkB,SAAiB,CAAG,MAAM,CAACF,IAAP,CAAYC,SAAZ,CAAA,CAAuBE,IAAvB,CAA4B,SAAUC,GAAV,CAAe,CACjE,MAAOH,UAAS,CAACG,GAAD,CAATH,EAAkB,MAAOA,UAAS,CAACG,GAAD,CAAhB,GAA0B,QAAnD,CACD,CAFuB,CANxB,CAUAd,UAAU,CAAGY,QAAQ,kBACZ7B,GAAG,CAAC4B,SAAD,CAAA,EAAA,CAAA,MAAA,CAAejB,KAAK,CAACK,QAAD,CAApB,CAAA,CAAA,mBACHY,SAAAA,CAFTX,CAGD,CAhBD,IAgBO,CAELA,UAAU,CAAGjB,GAAG,CACda,cADc,CAAA,EAAA,CAAA,MAAA,CAEXT,gBAAgB,CAACY,QAAD,CAFL,CAAA,GAAA,CAAA,CAAA,MAAA,CAEmBL,KAAK,CAACK,QAAD,CAFxB,CAAA,CAAhBC,CAID,CACD,MAAOA,WAAP,CACD,CAhCM,CAqCP,MAAO,SAASe,qBAAT,CAA8BjB,QAA9B,CAA6CJ,KAA7C,CAAyD,CAC9D,GAAMsB,OAAM,CAAGP,MAAM,CAACC,IAAPD,CAAYX,QAAZW,CAAAA,CAAsBQ,MAAtBR,CAA8BS,SAAAA,QAAD,QAC1CA,SAAQ,CAACC,UAATD,CAAoB,GAApBA,CADaT,GAAf,CAGAO,MAAM,CAACI,OAAPJ,CAAgBE,SAAAA,QAAD,CAAsB,CAAA,GAAA,aAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA,eAAA,CAEnC,GAAMG,GAAE,CAAA,CAAA,YAAA,CAAGvB,QAAQ,CAACuB,EAAZ,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,YAAA,CAAkBvB,QAAQ,CAACwB,eAAnC,CACA,GAAMC,UAAS,CAAGF,EAAE,CAChB,CACEG,KAAK,CAAEhC,eAAe,CACpB6B,EADoB,CAAA,CAAA,qBAAA,CAAA,CAAA,kBAAA,CAEpBvB,QAAQ,CAACoB,QAAD,CAFY,IAAA,IAAA,EAAA,kBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAEpBpB,kBAAAA,CAAoB0B,KAFA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,CAAA,eAAA,CAES9B,KAAK,CAACwB,QAAD,CAFd,IAAA,IAAA,EAAA,eAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAESxB,eAAAA,CAAiB8B,KAF1B,CADxB,CADgB,CAOhB,CAAA,CAV+B,CAYnC1B,QAAQ,CAACoB,QAAD,CAARpB,8CACKyB,SADgB,EAEhBzB,QAAQ,CAACoB,QAAD,CAFQ,EAGhBxB,KAAK,CAACwB,QAAD,CAAA,CAHVpB,CAKD,CAjBDkB,CAAAA,CAkBA,MAAOlB,SAAP,CACD,CAUD,MAAO,IAAMM,2BAA0B,CAAG,QAA7BA,2BAA0B,CACrCqB,MADwC,CAExCC,eAFwC,CAGxC7B,iBAHwC,CAIxCE,QAJwC,CAKrC,CACH,GAAIT,wBAAwB,CAACmC,MAAD,CAASC,eAAT,CAA0B3B,QAA1B,CAA5B,CAAiE,CAG/D,MAAOV,wBAAuB,CAACoC,MAAD,CAASC,eAAT,CAA0B7B,iBAA1B,CAA9B,CACD,CAJD,IAIO,CACL,MAAO4B,OAAP,CACD,CACF,CAbM,CAyBP,MAAO,SAASE,eAAT,CACLhC,KADK,CAELiC,cAFK,CAGLhC,cAHK,CAILF,KAJK,CAKLmC,WALK,CAML,CACA,GAAIhC,kBAAiB,CAAGT,oBAAoB,CAACO,KAAK,CAACU,WAAP,CAAoBwB,WAApB,CAA5C,CACA,GAAI,CAACnC,KAAL,CAAY,CACVA,KAAK,CAAG,CAAA,CAARA,CACD,CAED,GAAII,SAAJ,CACA,GAAIF,cAAJ,CAAoB,CAElBE,QAAQ,CAAGL,YAAY,CACrBa,kBAAkB,CAACZ,KAAD,CAAQE,cAAc,CAACW,YAAvB,CADG,CAErBZ,KAFqB,CAGrBiC,cAHqB,CAIrBhC,cAJqB,CAKrBC,iBALqB,CAFL,CAUlB,GAAIiC,mBAAkB,CACpB,MAAOlC,eAAc,CAACmC,SAAtB,GAAoC,UAApC,CACInC,cAAc,CAACmC,SADnB,CAEI,cAAc,CAACA,SAAf,4CACEpC,KADuB,CACvBA,KADuB,EAEpBG,QAFoB,EAGpBJ,KAHoB,EAIpBkC,cAAAA,EAPX,CASA9B,QAAQ,CAAGb,SAAS,CAClBa,QADkB,CAElBgC,kBAFkB,CAIlB,SAACE,QAAD,CAAWC,QAAX,CAAqBnB,GAArB,CAA6B,CAC3B,GAAI,CAAC9B,KAAK,CAACgD,QAAD,CAAV,CAAsB,CACpB,MAAOlC,SAAQ,CAACgB,GAAD,CAAf,CACD,CACF,CARiB,CAApBhB,CAWA,GAAMoC,QAAO,CACXxC,KAAK,CAACwC,OAANxC,EAAiBX,GAAG,CAACa,cAAD,CAAiB,sBAAjB,CA/BJ,CAiClB,GACEsC,OAAO,EACPtC,cAAc,CAACuC,QADfD,EAEAtC,cAAc,CAACuC,QAAfvC,CAAwBsC,OAAxBtC,CAHF,CAIE,CACA,GAAMwC,YAAW,CACf1C,KAAK,CAAC0C,WAAN1C,EAAqBX,GAAG,CAACa,cAAD,CAAiB,0BAAjB,CAD1B,CAEA,GAAIyC,aAAY,CAAG,cAAc,CAACF,QAAf,CAAwBD,OAAxB,CAAA,8CACdxC,KAD+C,EAE/CI,QAF+C,MAGlDsC,WAHkD,CAGlDA,WAHkD,CAIlDzC,KAJkD,CAIlDA,KAJkD,EAK/CiC,cAAAA,EALL,CAOAS,YAAY,CAAG5C,YAAY,CACzB4C,YADyB,CAEzB1C,KAFyB,CAGzBiC,cAHyB,CAIzBhC,cAJyB,CAKzBC,iBALyB,CAV3B,CAkBAC,QAAQ,CAAGb,SAAS,CAClBa,QADkB,CAElBuC,YAFkB,CAIlB,SAACL,QAAD,CAAWC,QAAX,CAAqBnB,GAArB,CAA6B,CAC3B,GAAI,CAAC9B,KAAK,CAACgD,QAAD,CAAV,CAAsB,CACpB,MAAOlC,SAAQ,CAACgB,GAAD,CAAf,CACD,CACF,CARiB,CAApBhB,CAUA,MAAOA,SAAQ,CAACoC,OAAhB,CACA,MAAOpC,SAAQ,CAACsC,WAAhB,CACD,CA1EH,CA6EA,GAAIE,eAAc,CAAG7C,YAAY,CAC/BC,KAD+B,CAE/BC,KAF+B,CAG/BiC,cAH+B,CAI/BhC,cAJ+B,CAK/BC,iBAL+B,CA7EjC,CAsFAC,QAAQ,CAAGb,SAAS,CAACa,QAAD,CAAWwC,cAAX,CAA2B,SAACN,QAAD,CAAWC,QAAX,CAAqBnB,GAArB,CAA6B,CAC1E,GAAI,CAAC9B,KAAK,CAACgD,QAAD,CAAV,CAAsB,CACpB,MAAOlC,SAAQ,CAACgB,GAAD,CAAf,CACD,CACF,CAJmB,CAApBhB,CAKAA,QAAQ,CAAGiB,oBAAoB,CAACjB,QAAD,CAAWJ,KAAX,CAA/BI,CACA,MAAOA,SAAP,CACD","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  {},\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]},"metadata":{},"sourceType":"module"}