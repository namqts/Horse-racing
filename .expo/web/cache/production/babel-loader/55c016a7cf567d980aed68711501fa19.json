{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"],_excluded2=[\"focusable\",\"stroke\",\"color\",\"size\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{useToken,usePropsResolution}from\"../../../hooks\";import{makeStyledComponent}from\"../../../utils/styled\";import{Svg,G}from\"./nbSvg\";import{questionOutlineIconPath}from\"./Icons/questionIconPath\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var SVG=makeStyledComponent(Svg);var SVGIcon=function SVGIcon(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _usePropsResolution=usePropsResolution('Icon',props),focusable=_usePropsResolution.focusable,stroke=_usePropsResolution.stroke,color=_usePropsResolution.color,size=_usePropsResolution.size,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var strokeHex=useToken('colors',stroke||'');var colorHex=useToken('colors',color||'');if(useHasResponsiveProps(props)){return null;}return React.createElement(SVG,_extends({},resolvedProps,{size:size,color:colorHex,stroke:strokeHex,focusable:focusable,accessibilityRole:\"image\",ref:ref}),React.Children.count(children)>0?React.createElement(G,null,React.Children.map(children,function(child,i){var _child$key;return React.createElement(ChildPath,_extends({key:(_child$key=child===null||child===void 0?void 0:child.key)!==null&&_child$key!==void 0?_child$key:i,element:child},child===null||child===void 0?void 0:child.props));})):questionOutlineIconPath);};var ChildPath=function ChildPath(_ref2){var element=_ref2.element,fill=_ref2.fill,pathStroke=_ref2.stroke;var pathStrokeColor=useToken('colors',pathStroke||'');var fillColor=useToken('colors',fill||'');if(!element){return null;}return React.cloneElement(element,{fill:fillColor?fillColor:'currentColor',stroke:pathStrokeColor});};export default memo(forwardRef(SVGIcon));","map":{"version":3,"sources":["SVGIcon.tsx"],"names":["React","memo","forwardRef","useToken","usePropsResolution","makeStyledComponent","Svg","G","questionOutlineIconPath","useHasResponsiveProps","SVG","SVGIcon","children","props","ref","focusable","stroke","color","size","resolvedProps","strokeHex","colorHex","Children","count","map","child","i","key","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"mappings":"wbAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,QAAT,CAAmBC,kBAAnB,sBACA,OAASC,mBAAT,6BACA,OAASC,GAAT,CAAcC,CAAd,eAEA,OAASC,uBAAT,gCACA,OAASC,qBAAT,4CAEA,GAAMC,IAAG,CAAGL,mBAAmB,CAACC,GAAD,CAA/B,CAEA,GAAMK,QAAO,CAAG,QAAVA,QAAO,MAAwCG,GAArC,CAAkD,IAA/CF,SAAF,MAAEA,QAAF,CAAeC,KAAAA,0CAC9B,wBAMIT,kBAAkB,CAAC,MAAD,CAASS,KAAT,CANtB,CACEE,SADI,qBACJA,SADI,CAEJC,MAFI,qBAEJA,MAFI,CAGJC,KAHI,qBAGJA,KAHI,CAIJC,IAJI,qBAIJA,IAJI,CAKDC,aAAAA,0DAEL,GAAMC,UAAS,CAAGjB,QAAQ,CAAC,QAAD,CAAWa,MAAM,EAAI,EAArB,CAA1B,CACA,GAAMK,SAAQ,CAAGlB,QAAQ,CAAC,QAAD,CAAWc,KAAK,EAAI,EAApB,CATuC,CAWhE,GAAIR,qBAAqB,CAACI,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,MAAA,CAAA,aAAA,CAAC,GAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMM,aADN,CAAA,CAYE,IAAI,CAAED,IAZR,CAaE,KAAK,CAAEG,QAbT,CAcE,MAAM,CAAED,SAdV,CAeE,SAAS,CAAEL,SAfb,CAgBE,iBAAiB,CAAC,OAhBpB,CAkBE,GAAG,CAAED,GAlBP,CAAA,CAAA,CAoBG,KAAK,CAACQ,QAAN,CAAeC,KAAf,CAAqBX,QAArB,CAAA,CAAiC,CAAjC,CACC,KAAA,CAAA,aAAA,CAAC,CAAD,CAAA,IAAA,CACG,KAAK,CAACU,QAAN,CAAeE,GAAf,CAAmBZ,QAAnB,CAA6B,SAACa,KAAD,CAAQC,CAAR,CAAA,CAAA,GAAA,WAAA,CAAA,MAC5B,MAAA,CAAA,aAAA,CAAC,SAAD,CAAA,QAAA,CAAA,CACE,GAAG,CAAA,CAAA,UAAA,CAAED,KAAF,GAAA,IAAA,EAAEA,KAAF,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAEA,KAAK,CAAEE,GAAT,IAAA,IAAA,EAAA,UAAA,GAAA,IAAA,EAAA,CAAA,UAAA,CAAgBD,CADrB,CAEE,OAAO,CAAED,KAFX,CAAA,CAGMA,KAHN,GAAA,IAAA,EAGMA,KAHN,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAGMA,KAAK,CAAEZ,KAHb,CAAA,CAD4B,CAAA,CAA7B,CADH,CADD,CAWCL,uBA/BJ,CADF,CAoCD,CAlDD,CAmDA,GAAMoB,UAAS,CAAG,QAAZA,UAAS,OAAmD,IAA7CC,QAAF,OAAEA,OAAF,CAAWC,IAAX,OAAWA,IAAX,CAAyBC,UAAAA,OAARf,MAAM,CACxC,GAAMgB,gBAAe,CAAG7B,QAAQ,CAAC,QAAD,CAAW4B,UAAU,EAAI,EAAzB,CAAhC,CACA,GAAME,UAAS,CAAG9B,QAAQ,CAAC,QAAD,CAAW2B,IAAI,EAAI,EAAnB,CAA1B,CAEA,GAAI,CAACD,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CAED,MAAO,MAAK,CAACK,YAAN,CAAmBL,OAAnB,CAA4B,CACjCC,IAAI,CAAEG,SAAS,CAAGA,SAAH,CAAe,cADG,CAEjCjB,MAAM,CAAEgB,eAFyB,CAA5B,CAAP,CAID,CAZD,CAaA,cAAe/B,KAAI,CAACC,UAAU,CAACS,OAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]},"metadata":{},"sourceType":"module"}