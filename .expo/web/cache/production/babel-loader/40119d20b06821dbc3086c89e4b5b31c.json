{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"_current\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import Text from\"../../primitives/Text\";import{BreadcrumbItemContext}from\"./Context\";import{usePropsResolution}from\"../../../hooks/useThemeProps/usePropsResolution\";var BreadcrumbText=function BreadcrumbText(props,ref){var _React$useContext=React.useContext(BreadcrumbItemContext),isCurrent=_React$useContext.isCurrent;var _usePropsResolution=usePropsResolution('BreadcrumbText',props),children=_usePropsResolution.children,_current=_usePropsResolution._current,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);return React.createElement(Text,_extends({ref:ref},isCurrent&&_current,resolvedProps),children);};export default memo(forwardRef(BreadcrumbText));","map":{"version":3,"sources":["BreadcrumbText.tsx"],"names":["React","forwardRef","memo","Text","BreadcrumbItemContext","usePropsResolution","BreadcrumbText","props","ref","isCurrent","useContext","children","_current","resolvedProps"],"mappings":"kZAAA,MAAOA,MAAP,EAAgBC,UAAhB,CAA4BC,IAA5B,KAAwC,OAAxC,CACA,MAAOC,KAAP,6BAEA,OAASC,qBAAT,iBACA,OAASC,kBAAT,uDAGA,GAAMC,eAAc,CAAG,QAAjBA,eAAc,CAAIC,KAAD,CAA8BC,GAA9B,CAA4C,CACjE,sBAA8CR,KAAK,CAACU,UAANV,CAC5CI,qBAD4CJ,CAA9C,CAAQS,SAAAA,mBAAAA,SAAAA,CAGR,wBAA+CJ,kBAAkB,CAC/D,gBAD+D,CAE/DE,KAF+D,CAAjE,CAAMI,QAAF,qBAAEA,QAAF,CAAYC,QAAZ,qBAAYA,QAAZ,CAAyBC,aAAAA,yDAI7B,MACE,MAAA,CAAA,aAAA,CAAC,IAAD,CAAA,QAAA,CAAA,CAAM,GAAG,CAAEL,GAAX,CAAA,CAAqBC,SAAS,EAAIG,QAAlC,CAAiDC,aAAjD,CAAA,CACGF,QADH,CADF,CAKD,CAbD,CAeA,cAAeT,KAAI,CAACD,UAAU,CAACK,cAAD,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport type { IBreadcrumbItemContext, IBreadcrumbTextProps } from './types';\nimport { BreadcrumbItemContext } from './Context';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\n\n// Add breadcrumbText as child of breadcrumbItem for implementaion of isCurrent prop\nconst BreadcrumbText = (props: IBreadcrumbTextProps, ref?: any) => {\n  const { isCurrent }: IBreadcrumbItemContext = React.useContext(\n    BreadcrumbItemContext\n  );\n  let { children, _current, ...resolvedProps } = usePropsResolution(\n    'BreadcrumbText',\n    props\n  );\n  return (\n    <Text ref={ref} {...(isCurrent && _current)} {...resolvedProps}>\n      {children}\n    </Text>\n  );\n};\n\nexport default memo(forwardRef(BreadcrumbText));\n"]},"metadata":{},"sourceType":"module"}