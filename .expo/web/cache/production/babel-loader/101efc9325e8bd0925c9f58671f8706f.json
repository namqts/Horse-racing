{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"fieldIndex\",\"defaultValue\"],_excluded2=[\"handleChange\",\"value\",\"setRefList\",\"defaultValue\",\"handleMultiValueChange\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import{Input}from\"../../primitives/Input\";import{PinInputContext}from\"./Context\";import Platform from\"react-native-web/dist/exports/Platform\";import{mergeRefs}from\"../../../utils\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var PinInputFiled=function PinInputFiled(_ref,ref){var _ref$fieldIndex=_ref.fieldIndex,fieldIndex=_ref$fieldIndex===void 0?0:_ref$fieldIndex,pDefaultValue=_ref.defaultValue,props=_objectWithoutProperties(_ref,_excluded);var _React$useContext=React.useContext(PinInputContext),handleChange=_React$useContext.handleChange,cValue=_React$useContext.value,setRefList=_React$useContext.setRefList,cDefaultValue=_React$useContext.defaultValue,handleMultiValueChange=_React$useContext.handleMultiValueChange,context=_objectWithoutProperties(_React$useContext,_excluded2);cDefaultValue=cDefaultValue&&cDefaultValue[fieldIndex];var defaultValue=pDefaultValue||cDefaultValue;var value=cValue&&cValue[fieldIndex];var keyPressHandler=function keyPressHandler(event){if(Platform.OS!=='web'){if(event.nativeEvent.key>=0&&event.nativeEvent.key<=9){handleChange&&handleChange(event.nativeEvent.key,fieldIndex);}else if(event.nativeEvent.key==='Backspace'){handleChange&&handleChange('',fieldIndex);}}};var textChangeHandler=function textChangeHandler(value){handleMultiValueChange&&handleMultiValueChange(value,fieldIndex);};var myRef=React.useRef(null);React.useEffect(function(){setRefList&&setRefList(myRef,fieldIndex);},[myRef,fieldIndex,setRefList]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Input,_extends({ref:mergeRefs([myRef,ref])},context,props,{onKeyPress:function onKeyPress(event){return keyPressHandler(event);},onChangeText:function onChangeText(value){return textChangeHandler(value);},keyboardType:\"numeric\",defaultValue:defaultValue,value:value}));};export default React.memo(React.forwardRef(PinInputFiled));","map":{"version":3,"sources":["PinInputField.tsx"],"names":["React","Input","PinInputContext","mergeRefs","useHasResponsiveProps","PinInputFiled","fieldIndex","defaultValue","pDefaultValue","props","ref","handleChange","value","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","useContext","keyPressHandler","event","Platform","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","memo","forwardRef"],"mappings":"ifAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,8BAEA,OAASC,eAAT,iBAAA,6DAEA,OAASC,SAAT,sBACA,OAASC,qBAAT,4CAEA,GAAMC,cAAa,CAAG,QAAhBA,cAAa,MAMjBK,GANoB,CAOjB,0BALDJ,UAAU,CAAVA,UAAU,0BAAG,CADf,iBAEgBE,aAFhB,MAEED,YAAY,CACTE,KAAAA,0CAIL,sBAOsBT,KAAK,CAACkB,UAANlB,CAAiBE,eAAjBF,CAPtB,CACEW,YADE,mBACFA,YADE,CAEKE,MAFL,mBAEFD,KAAK,CACLE,UAHE,mBAGFA,UAHE,CAIYC,aAJZ,mBAIFR,YAAY,CACZS,sBALE,mBAKFA,sBALE,CAMCC,OAAAA,wDAELF,aAAa,CAAGA,aAAa,EAAIA,aAAa,CAACT,UAAD,CAA9CS,CACA,GAAIR,aAAY,CAAGC,aAAa,EAAIO,aAApC,CACA,GAAIH,MAAK,CAAGC,MAAM,EAAIA,MAAM,CAACP,UAAD,CAA5B,CAEA,GAAMa,gBAAe,CAAIC,QAAnBD,gBAAe,CAAIC,KAAD,CAAgB,CACtC,GAAIC,QAAQ,CAACC,EAATD,GAAgB,KAApB,CAA2B,CACzB,GAAID,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,EAAyB,CAAzBA,EAA8BA,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,EAAyB,CAA3D,CAA8D,CAC5DT,YAAY,EAAIA,YAAY,CAACS,KAAK,CAACG,WAANH,CAAkBI,GAAnB,CAAwBlB,UAAxB,CAA5BK,CACD,CAFD,IAEO,IAAIS,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,GAA0B,WAA9B,CAA2C,CAChDT,YAAY,EAAIA,YAAY,CAAC,EAAD,CAAKL,UAAL,CAA5BK,CACD,CACF,CACF,CARD,CASA,GAAMc,kBAAiB,CAAIb,QAArBa,kBAAiB,CAAIb,KAAD,CAAgB,CAExCI,sBAAsB,EAAIA,sBAAsB,CAACJ,KAAD,CAAQN,UAAR,CAAhDU,CACD,CAHD,CAIA,GAAMU,MAAK,CAAG1B,KAAK,CAAC2B,MAAN3B,CAAa,IAAbA,CAAd,CACAA,KAAK,CAAC4B,SAAN5B,CAAgB,UAAM,CACpBc,UAAU,EAAIA,UAAU,CAACY,KAAD,CAAQpB,UAAR,CAAxBQ,CACD,CAFDd,CAEG,CAAC0B,KAAD,CAAQpB,UAAR,CAAoBQ,UAApB,CAFHd,CA3BG,CAgCH,GAAII,qBAAqB,CAACK,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,MAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,CAAA,CAEE,GAAG,CAAEN,SAAS,CAAC,CAACuB,KAAD,CAAQhB,GAAR,CAAD,CAFhB,CAAA,CAGMO,OAHN,CAIMR,KAJN,CAAA,CAKE,UAAU,CAAGW,oBAAAA,KAAD,QAAWD,gBAAe,CAACC,KAAD,CALxC,GAME,YAAY,CAAGR,sBAAAA,KAAD,QAAWa,kBAAiB,CAACb,KAAD,CAN5C,GAOE,YAAY,CAAC,SAPf,CAQE,YAAY,CAAEL,YARhB,CASE,KAAK,CAAEK,KATT,CAAA,CAAA,CADF,CAaD,CAvDD,CAyDA,cAAeZ,MAAK,CAAC6B,IAAN7B,CAAWA,KAAK,CAAC8B,UAAN9B,CAAiBK,aAAjBL,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"module"}