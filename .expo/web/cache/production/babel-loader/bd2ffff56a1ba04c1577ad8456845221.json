{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"isOpen\",\"onClose\",\"defaultIsOpen\",\"initialFocusRef\",\"finalFocusRef\",\"avoidKeyboard\",\"closeOnOverlayClick\",\"isKeyboardDismissable\",\"overlayVisible\",\"backdropVisible\",\"animationPreset\"],_excluded2=[\"contentSize\",\"_backdrop\",\"_backdropFade\",\"_fade\",\"_slide\",\"useRNModal\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Backdrop from\"../Backdrop\";import{Slide}from\"../Transitions\";import{FocusScope}from'@react-native-aria/focus';import{useControllableState,usePropsResolution}from\"../../../hooks\";import{AlertDialogContext}from\"./Context\";import Box from\"../../primitives/Box\";import{Fade}from\"../Transitions\";import{useKeyboardBottomInset}from\"../../../utils\";import{Overlay}from\"../../primitives/Overlay\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertDialog=function AlertDialog(_ref,ref){var children=_ref.children,isOpen=_ref.isOpen,onClose=_ref.onClose,defaultIsOpen=_ref.defaultIsOpen,initialFocusRef=_ref.initialFocusRef,finalFocusRef=_ref.finalFocusRef,avoidKeyboard=_ref.avoidKeyboard,_ref$closeOnOverlayCl=_ref.closeOnOverlayClick,closeOnOverlayClick=_ref$closeOnOverlayCl===void 0?false:_ref$closeOnOverlayCl,_ref$isKeyboardDismis=_ref.isKeyboardDismissable,isKeyboardDismissable=_ref$isKeyboardDismis===void 0?true:_ref$isKeyboardDismis,_ref$overlayVisible=_ref.overlayVisible,overlayVisible=_ref$overlayVisible===void 0?true:_ref$overlayVisible,_ref$backdropVisible=_ref.backdropVisible,backdropVisible=_ref$backdropVisible===void 0?true:_ref$backdropVisible,animationPreset=_ref.animationPreset,rest=_objectWithoutProperties(_ref,_excluded);var bottomInset=useKeyboardBottomInset();var _usePropsResolution=usePropsResolution('AlertDialog',rest),contentSize=_usePropsResolution.contentSize,_backdrop=_usePropsResolution._backdrop,_backdropFade=_usePropsResolution._backdropFade,_fade=_usePropsResolution._fade,_slide=_usePropsResolution._slide,useRNModal=_usePropsResolution.useRNModal,restThemeProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var _useControllableState=useControllableState({value:isOpen,defaultValue:defaultIsOpen,onChange:function onChange(val){if(!val)onClose&&onClose();}}),_useControllableState2=_slicedToArray(_useControllableState,2),visible=_useControllableState2[0],setVisible=_useControllableState2[1];var handleClose=function handleClose(){return setVisible(false);};var child=React.createElement(Box,_extends({bottom:avoidKeyboard?bottomInset+'px':undefined},restThemeProps,{ref:ref}),children);if(useHasResponsiveProps(rest)){return null;}return React.createElement(Overlay,{isOpen:visible,onRequestClose:handleClose,isKeyboardDismissable:isKeyboardDismissable,useRNModalOnAndroid:true,useRNModal:useRNModal,unmountOnExit:true},React.createElement(AlertDialogContext.Provider,{value:{handleClose:handleClose,contentSize:contentSize,initialFocusRef:initialFocusRef,finalFocusRef:finalFocusRef}},React.createElement(Fade,_extends({in:visible,style:StyleSheet.absoluteFill},_backdropFade),overlayVisible&&backdropVisible&&React.createElement(Backdrop,_extends({onPress:function onPress(){closeOnOverlayClick&&handleClose();}},_backdrop))),animationPreset==='slide'?React.createElement(Slide,_extends({in:visible},_slide),React.createElement(FocusScope,{contain:visible,autoFocus:visible&&!initialFocusRef,restoreFocus:visible&&!finalFocusRef},child)):React.createElement(Fade,_extends({in:visible,style:StyleSheet.absoluteFill},_fade),React.createElement(FocusScope,{contain:visible,autoFocus:visible&&!initialFocusRef,restoreFocus:visible&&!finalFocusRef},child))));};export default memo(forwardRef(AlertDialog));","map":{"version":3,"sources":["AlertDialog.tsx"],"names":["React","forwardRef","memo","Backdrop","Slide","FocusScope","useControllableState","usePropsResolution","AlertDialogContext","Box","Fade","useKeyboardBottomInset","Overlay","useHasResponsiveProps","AlertDialog","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","ref","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","useRNModal","restThemeProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","child","undefined","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    useRNModal,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n      useRNModal={useRNModal}\n      unmountOnExit\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]},"metadata":{},"sourceType":"module"}