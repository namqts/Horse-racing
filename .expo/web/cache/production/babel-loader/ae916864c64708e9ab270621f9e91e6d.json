{"ast":null,"code":"import{theme as defaultTheme}from\"./../theme\";import mergeWith from'lodash.mergewith';function isFunction(value){return typeof value==='function';}export function extendTheme(overrides){function customizer(source,override){if(isFunction(source)){return function(){var sourceValue=source.apply(void 0,arguments);var overrideValue=isFunction(override)?override.apply(void 0,arguments):override;return mergeWith({},sourceValue,overrideValue,customizer);};}return undefined;}for(var _len=arguments.length,restOverrides=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){restOverrides[_key-1]=arguments[_key];}var finalOverrides=[overrides].concat(restOverrides).reduce(function(prevValue,currentValue){return mergeWith({},prevValue,currentValue,customizer);},defaultTheme);return finalOverrides;}","map":{"version":3,"sources":["extendTheme.tsx"],"names":["theme","defaultTheme","mergeWith","isFunction","value","extendTheme","overrides","restOverrides","customizer","source","override","sourceValue","overrideValue","undefined","finalOverrides","reduce","prevValue","currentValue"],"mappings":"AAAA,OAASA,KAAK,GAAIC,aAAlB,kBACA,MAAOC,UAAP,KAAsB,kBAAtB,CAEA,QAASC,WAAT,CAAoBC,KAApB,CAAyC,CACvC,MAAO,OAAOA,MAAP,GAAiB,UAAxB,CACD,CAID,MAAO,SAASC,YAAT,CACLC,SADK,CAGL,CACA,QAASE,WAAT,CAAoBC,MAApB,CAAiCC,QAAjC,CAAgD,CAC9C,GAAIP,UAAU,CAACM,MAAD,CAAd,CAAwB,CACtB,MAAO,WAAoB,CACzB,GAAME,YAAW,CAAGF,MAAM,wBAA1B,CACA,GAAMG,cAAa,CAAGT,UAAU,CAACO,QAAD,CAAVP,CAClBO,QAAQ,wBADUP,CAElBO,QAFJ,CAGA,MAAOR,UAAS,CAAC,CAAA,CAAD,CAAKS,WAAL,CAAkBC,aAAlB,CAAiCJ,UAAjC,CAAhB,CACD,CAND,CAOD,CACD,MAAOK,UAAP,CACD,CAAA,8BAbEN,aAFE,qDAEFA,aAFE,0BAiBL,GAAMO,eAAc,CAAG,CAACR,SAAD,SAAeC,aAAf,EAA8BQ,MAA9B,CACrB,SAACC,SAAD,CAAYC,YAAZ,CAA6B,CAC3B,MAAOf,UAAS,CAAC,CAAA,CAAD,CAAKc,SAAL,CAAgBC,YAAhB,CAA8BT,UAA9B,CAAhB,CACD,CAHoB,CAIrBP,YAJqB,CAAvB,CAOA,MAAOa,eAAP,CACD","sourcesContent":["import { theme as defaultTheme, Theme } from './../theme';\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\ntype ThemeUtil = Theme | (Record<string, any> & {});\n\nexport function extendTheme<T extends ThemeUtil>(\n  overrides: T,\n  ...restOverrides: T[]\n) {\n  function customizer(source: any, override: any) {\n    if (isFunction(source)) {\n      return (...args: any[]) => {\n        const sourceValue = source(...args);\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n    return undefined;\n  }\n\n  const finalOverrides = [overrides, ...restOverrides].reduce(\n    (prevValue, currentValue) => {\n      return mergeWith({}, prevValue, currentValue, customizer);\n    },\n    defaultTheme\n  );\n\n  return finalOverrides as T & Theme;\n}\n"]},"metadata":{},"sourceType":"module"}