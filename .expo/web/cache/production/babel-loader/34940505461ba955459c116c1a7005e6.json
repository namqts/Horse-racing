{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"type\",\"defaultValue\",\"value\",\"onChange\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import MenuGroup from\"./MenuGroup\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";export var MenuOptionContext=React.createContext({values:[],onChange:function onChange(_val){},type:'checkbox'});var MenuOptionGroup=function MenuOptionGroup(_ref,ref){var type=_ref.type,defaultValue=_ref.defaultValue,value=_ref.value,onChange=_ref.onChange,props=_objectWithoutProperties(_ref,_excluded);var internalDefaultValue=defaultValue?Array.isArray(defaultValue)?defaultValue:[defaultValue]:[];var _React$useState=React.useState(internalDefaultValue),_React$useState2=_slicedToArray(_React$useState,2),internalValues=_React$useState2[0],setValues=_React$useState2[1];var _onChange=function _onChange(newValue){if(type==='checkbox'){var newValues=_toConsumableArray(internalValues);if(internalValues.includes(newValue)){newValues.splice(newValues.indexOf(newValue),1);setValues(newValues);}else{newValues.push(newValue);setValues(newValues);}onChange&&onChange(newValues);}else if(type==='radio'){setValues([newValue]);onChange&&onChange(newValue);}};if(useHasResponsiveProps(props)){return null;}return React.createElement(MenuOptionContext.Provider,{value:{values:!value?internalValues:Array.isArray(value)?value:[value],onChange:_onChange,type:type}},React.createElement(MenuGroup,_extends({},props,{ref:ref})));};export default memo(forwardRef(MenuOptionGroup));","map":{"version":3,"sources":["MenuOptionGroup.tsx"],"names":["React","forwardRef","memo","MenuGroup","useHasResponsiveProps","MenuOptionContext","createContext","values","onChange","_val","type","MenuOptionGroup","defaultValue","value","props","ref","internalDefaultValue","Array","isArray","internalValues","setValues","useState","_onChange","newValue","newValues","includes","splice","indexOf","push"],"mappings":"+iBAAA,MAAOA,MAAP,EAAgBC,UAAhB,CAA4BC,IAA5B,KAAwC,OAAxC,CACA,MAAOC,UAAP,mBAEA,OAASC,qBAAT,4CAEA,MAAO,IAAMC,kBAAiB,CAAG,KAAK,CAACC,aAAN,CAA6C,CAC5EC,MAAM,CAAE,EADoE,CAE5EC,QAAQ,CAAGC,kBAAAA,IAAD,CAAU,CAAE,CAFsD,CAG5EC,IAAI,CAAE,UAHsE,CAA7C,CAA1B,CAMP,GAAMC,gBAAe,CAAG,QAAlBA,gBAAe,MAEnBI,GAFsB,CAGnB,IAFDL,KAAF,MAAEA,IAAF,CAAQE,YAAR,MAAQA,YAAR,CAAsBC,KAAtB,MAAsBA,KAAtB,CAA6BL,QAA7B,MAA6BA,QAA7B,CAA0CM,KAAAA,0CAG1C,GAAME,qBAAoB,CAAGJ,YAAY,CACrCK,KAAK,CAACC,OAAND,CAAcL,YAAdK,CAAAA,CACEL,YADFK,CAEE,CAACL,YAAD,CAHmC,CAIrC,EAJJ,CAMA,oBAAoCZ,KAAK,CAACqB,QAANrB,CAClCgB,oBADkChB,CAApC,oDAAOmB,cAAD,qBAAiBC,SAAjB,qBAGN,GAAME,UAAS,CAAIC,QAAbD,UAAS,CAAIC,QAAD,CAA+B,CAC/C,GAAIb,IAAI,GAAK,UAAb,CAAyB,CACvB,GAAMc,UAAS,oBAAOL,cAAJ,CAAlB,CACA,GAAIA,cAAc,CAACM,QAAfN,CAAwBI,QAAxBJ,CAAJ,CAAuC,CACrCK,SAAS,CAACE,MAAVF,CAAiBA,SAAS,CAACG,OAAVH,CAAkBD,QAAlBC,CAAjBA,CAA8C,CAA9CA,CAAAA,CACAJ,SAAS,CAACI,SAAD,CAATJ,CACD,CAHD,IAGO,CACLI,SAAS,CAACI,IAAVJ,CAAeD,QAAfC,CAAAA,CACAJ,SAAS,CAACI,SAAD,CAATJ,CACD,CACDZ,QAAQ,EAAIA,QAAQ,CAACgB,SAAD,CAApBhB,CACD,CAVD,IAUO,IAAIE,IAAI,GAAK,OAAb,CAAsB,CAC3BU,SAAS,CAAC,CAACG,QAAD,CAAD,CAATH,CACAZ,QAAQ,EAAIA,QAAQ,CAACe,QAAD,CAApBf,CACD,CACF,CAzBE,CA2BH,GAAIJ,qBAAqB,CAACU,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,MAAA,CAAA,aAAA,CAAC,iBAAD,CAAmB,QAAnB,CAAA,CACE,KAAK,CAAE,CACLP,MAAM,CAAE,CAACM,KAAD,CACJM,cADI,CAEJF,KAAK,CAACC,OAAND,CAAcJ,KAAdI,CAAAA,CACAJ,KADAI,CAEA,CAACJ,KAAD,CALC,CAMLL,QAAQ,CAAEc,SANL,CAOLZ,IAAAA,CAAAA,IAPK,CADT,CAAA,CAWE,KAAA,CAAA,aAAA,CAAC,SAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CAAeI,KAAf,CAAA,CAAsB,GAAG,CAAEC,GAA3B,CAAA,CAAA,CAXF,CADF,CAeD,CAhDD,CAkDA,cAAeb,KAAI,CAACD,UAAU,CAACU,eAAD,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport MenuGroup from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nconst MenuOptionGroup = (\n  { type, defaultValue, value, onChange, ...props }: IMenuOptionGroupProps,\n  ref?: any\n) => {\n  const internalDefaultValue = defaultValue\n    ? Array.isArray(defaultValue)\n      ? defaultValue\n      : [defaultValue]\n    : [];\n\n  const [internalValues, setValues] = React.useState<Array<string | number>>(\n    internalDefaultValue\n  );\n  const _onChange = (newValue: string | number) => {\n    if (type === 'checkbox') {\n      const newValues = [...internalValues];\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n      onChange && onChange(newValues);\n    } else if (type === 'radio') {\n      setValues([newValue]);\n      onChange && onChange(newValue);\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuOptionContext.Provider\n      value={{\n        values: !value\n          ? internalValues\n          : Array.isArray(value)\n          ? value\n          : [value],\n        onChange: _onChange,\n        type,\n      }}\n    >\n      <MenuGroup {...props} ref={ref} />\n    </MenuOptionContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(MenuOptionGroup));\n"]},"metadata":{},"sourceType":"module"}