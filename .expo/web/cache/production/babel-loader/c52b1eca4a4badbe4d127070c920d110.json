{"ast":null,"code":"var xor=require('buffer-xor');var Buffer=require('safe-buffer').Buffer;var incr32=require(\"../incr32\");function getBlock(self){var out=self._cipher.encryptBlockRaw(self._prev);incr32(self._prev);return out;}var blockSize=16;exports.encrypt=function(self,chunk){var chunkNum=Math.ceil(chunk.length/blockSize);var start=self._cache.length;self._cache=Buffer.concat([self._cache,Buffer.allocUnsafe(chunkNum*blockSize)]);for(var i=0;i<chunkNum;i++){var out=getBlock(self);var offset=start+i*blockSize;self._cache.writeUInt32BE(out[0],offset+0);self._cache.writeUInt32BE(out[1],offset+4);self._cache.writeUInt32BE(out[2],offset+8);self._cache.writeUInt32BE(out[3],offset+12);}var pad=self._cache.slice(0,chunk.length);self._cache=self._cache.slice(chunk.length);return xor(chunk,pad);};","map":{"version":3,"names":["xor","require","Buffer","incr32","getBlock","self","out","_cipher","encryptBlockRaw","_prev","blockSize","exports","encrypt","chunk","chunkNum","Math","ceil","length","start","_cache","concat","allocUnsafe","i","offset","writeUInt32BE","pad","slice"],"sources":["C:/Users/Nam-QTS/AppData/Roaming/nvm/v14.18.1/node_modules/expo-cli/node_modules/browserify-aes/modes/ctr.js"],"sourcesContent":["var xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"],"mappings":"AAAA,GAAIA,IAAG,CAAGC,OAAO,CAAC,YAAY,CAAC,CAC/B,GAAIC,OAAM,CAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM,CAC1C,GAAIC,OAAM,CAAGF,OAAO,aAAa,CAEjC,QAASG,SAAQ,CAAEC,IAAI,CAAE,CACvB,GAAIC,IAAG,CAAGD,IAAI,CAACE,OAAO,CAACC,eAAe,CAACH,IAAI,CAACI,KAAK,CAAC,CAClDN,MAAM,CAACE,IAAI,CAACI,KAAK,CAAC,CAClB,MAAOH,IAAG,CACZ,CAEA,GAAII,UAAS,CAAG,EAAE,CAClBC,OAAO,CAACC,OAAO,CAAG,SAAUP,IAAI,CAAEQ,KAAK,CAAE,CACvC,GAAIC,SAAQ,CAAGC,IAAI,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAAGP,SAAS,CAAC,CAClD,GAAIQ,MAAK,CAAGb,IAAI,CAACc,MAAM,CAACF,MAAM,CAC9BZ,IAAI,CAACc,MAAM,CAAGjB,MAAM,CAACkB,MAAM,CAAC,CAC1Bf,IAAI,CAACc,MAAM,CACXjB,MAAM,CAACmB,WAAW,CAACP,QAAQ,CAAGJ,SAAS,CAAC,CACzC,CAAC,CACF,IAAK,GAAIY,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGR,QAAQ,CAAEQ,CAAC,EAAE,CAAE,CACjC,GAAIhB,IAAG,CAAGF,QAAQ,CAACC,IAAI,CAAC,CACxB,GAAIkB,OAAM,CAAGL,KAAK,CAAGI,CAAC,CAAGZ,SAAS,CAClCL,IAAI,CAACc,MAAM,CAACK,aAAa,CAAClB,GAAG,CAAC,CAAC,CAAC,CAAEiB,MAAM,CAAG,CAAC,CAAC,CAC7ClB,IAAI,CAACc,MAAM,CAACK,aAAa,CAAClB,GAAG,CAAC,CAAC,CAAC,CAAEiB,MAAM,CAAG,CAAC,CAAC,CAC7ClB,IAAI,CAACc,MAAM,CAACK,aAAa,CAAClB,GAAG,CAAC,CAAC,CAAC,CAAEiB,MAAM,CAAG,CAAC,CAAC,CAC7ClB,IAAI,CAACc,MAAM,CAACK,aAAa,CAAClB,GAAG,CAAC,CAAC,CAAC,CAAEiB,MAAM,CAAG,EAAE,CAAC,CAChD,CACA,GAAIE,IAAG,CAAGpB,IAAI,CAACc,MAAM,CAACO,KAAK,CAAC,CAAC,CAAEb,KAAK,CAACI,MAAM,CAAC,CAC5CZ,IAAI,CAACc,MAAM,CAAGd,IAAI,CAACc,MAAM,CAACO,KAAK,CAACb,KAAK,CAACI,MAAM,CAAC,CAC7C,MAAOjB,IAAG,CAACa,KAAK,CAAEY,GAAG,CAAC,CACxB,CAAC"},"metadata":{},"sourceType":"script"}