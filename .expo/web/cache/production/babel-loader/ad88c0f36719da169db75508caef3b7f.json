{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{useKeyboardDismissable,usePropsResolution,useToken}from\"../../../hooks\";import React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{Popper}from\"../Popper\";import{PopoverContext}from\"./PopoverContext\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";export var PopoverContent=React.forwardRef(function(props,ref){var _ref,_ref2,_props$bgColor;var _React$useContext=React.useContext(PopoverContext),onClose=_React$useContext.onClose,initialFocusRef=_React$useContext.initialFocusRef,finalFocusRef=_React$useContext.finalFocusRef,popoverContentId=_React$useContext.popoverContentId,headerMounted=_React$useContext.headerMounted,bodyMounted=_React$useContext.bodyMounted,bodyId=_React$useContext.bodyId,headerId=_React$useContext.headerId,isOpen=_React$useContext.isOpen;var resolvedProps=usePropsResolution('PopoverContent',props);var arrowDefaultColor=(_ref=(_ref2=(_props$bgColor=props.bgColor)!==null&&_props$bgColor!==void 0?_props$bgColor:props.bg)!==null&&_ref2!==void 0?_ref2:props.backgroundColor)!==null&&_ref!==void 0?_ref:resolvedProps.backgroundColor;var color=useToken('colors',arrowDefaultColor);React.useEffect(function(){var finalFocusRefCurrentVal=finalFocusRef===null||finalFocusRef===void 0?void 0:finalFocusRef.current;if(initialFocusRef&&initialFocusRef.current){initialFocusRef.current.focus();}return function(){if(finalFocusRefCurrentVal){finalFocusRefCurrentVal.focus();}};},[finalFocusRef,initialFocusRef]);useKeyboardDismissable({enabled:true,callback:onClose});var arrowElement=null;var restChildren=[];React.Children.toArray(props.children).forEach(function(child){var _child$type;if((child===null||child===void 0?void 0:(_child$type=child.type)===null||_child$type===void 0?void 0:_child$type.displayName)==='PopperArrow'){var _child$props$color;arrowElement=React.cloneElement(child,{backgroundColor:(_child$props$color=child.props.color)!==null&&_child$props$color!==void 0?_child$props$color:color});}else{restChildren.push(child);}});var accessibilityProps=Platform.OS==='web'?{'accessibilityRole':'dialog','aria-labelledby':headerMounted?headerId:undefined,'aria-describedby':bodyMounted?bodyId:undefined}:{};if(useHasResponsiveProps(props)){return null;}return React.createElement(Popper.Content,_extends({nativeID:popoverContentId},accessibilityProps,resolvedProps,{ref:ref,isOpen:isOpen}),arrowElement,restChildren);});PopoverContent.displayName='PopoverContent';","map":{"version":3,"sources":["PopoverContent.tsx"],"names":["useKeyboardDismissable","usePropsResolution","useToken","React","Popper","PopoverContext","useHasResponsiveProps","PopoverContent","forwardRef","props","ref","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","isOpen","useContext","resolvedProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","toArray","children","forEach","child","type","displayName","cloneElement","push","accessibilityProps","OS","undefined"],"mappings":"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","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.toArray(props.children).forEach((child: any) => {\n      if (child?.type?.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]},"metadata":{},"sourceType":"module"}