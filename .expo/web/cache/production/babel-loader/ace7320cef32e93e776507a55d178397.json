{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useMemo}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{HybridContext}from\"./Context\";import{useModeManager}from\"./../color-mode/hooks\";import{keyboardDismissHandlerManager}from\"../../hooks\";var HybridProvider=function HybridProvider(_ref){var children=_ref.children,_ref$options=_ref.options,_ref$options$initialC=_ref$options.initialColorMode,initialColorMode=_ref$options$initialC===void 0?'light':_ref$options$initialC,_ref$options$accessib=_ref$options.accessibleColors,isTextColorAccessible=_ref$options$accessib===void 0?false:_ref$options$accessib,useSystemColorMode=_ref$options.useSystemColorMode,colorModeManager=_ref.colorModeManager;var _useModeManager=useModeManager(initialColorMode,useSystemColorMode,colorModeManager),colorMode=_useModeManager.colorMode,setColorMode=_useModeManager.setColorMode;var toggleColorMode=React.useCallback(function(){setColorMode(colorMode==='light'?'dark':'light');},[colorMode,setColorMode]);var _React$useState=React.useState(isTextColorAccessible),_React$useState2=_slicedToArray(_React$useState,2),accessibleColors=_React$useState2[0],setAccessibleColors=_React$useState2[1];var contextValue=useMemo(function(){return{colorMode:{colorMode:colorMode,toggleColorMode:toggleColorMode,setColorMode:setColorMode,accessibleColors:accessibleColors,setAccessibleColors:setAccessibleColors}};},[colorMode,toggleColorMode,setColorMode,accessibleColors,setAccessibleColors]);React.useEffect(function(){var escapeKeyListener=null;if(Platform.OS==='web'){escapeKeyListener=function escapeKeyListener(e){if(e.key==='Escape'){if(keyboardDismissHandlerManager.length()>0){var lastHandler=keyboardDismissHandlerManager.pop();lastHandler();}}};document.addEventListener('keydown',escapeKeyListener);}return function(){if(Platform.OS==='web'){document.removeEventListener('keydown',escapeKeyListener);}};},[]);return React.createElement(HybridContext.Provider,{value:contextValue},children);};export default HybridProvider;","map":{"version":3,"sources":["HybridProvider.tsx"],"names":["React","useMemo","HybridContext","useModeManager","keyboardDismissHandlerManager","HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","toggleColorMode","useCallback","setAccessibleColors","useState","contextValue","useEffect","escapeKeyListener","Platform","OS","e","key","length","lastHandler","pop","document","addEventListener","removeEventListener"],"mappings":"iEAAA,MAAOA,MAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CAAA,6DAEA,OAASC,aAAT,iBACA,OAASC,cAAT,6BAEA,OAASC,6BAAT,mBAEA,GAAMC,eAAc,CAAG,QAAjBA,eAAc,MAQW,IAP7BC,SADsB,MACtBA,QADsB,mBAEtBC,OAAO,oCACLC,gBAAgB,CAAhBA,gBAAgB,gCAAG,OADZ,0DAEPC,gBAAgB,CAAEC,qBAAqB,gCAAG,KAFnC,uBAGPC,kBAAAA,cAAAA,kBAAAA,CAEFC,gBAAAA,MAAAA,gBAAAA,CAGA,oBAAoCT,cAAc,CAChDK,gBADgD,CAEhDG,kBAFgD,CAGhDC,gBAHgD,CAAlD,CAAQC,SAAF,iBAAEA,SAAF,CAAaC,YAAAA,iBAAAA,YAAAA,CAMnB,GAAMC,gBAAe,CAAG,KAAK,CAACC,WAAN,CAAkB,UAAM,CAC9CF,YAAY,CAACD,SAAS,GAAK,OAAdA,CAAwB,MAAxBA,CAAiC,OAAlC,CAAZC,CACD,CAFuB,CAErB,CAACD,SAAD,CAAYC,YAAZ,CAFqB,CARK,CAa7B,oBAAgDd,KAAK,CAACkB,QAANlB,CAC9CU,qBAD8CV,CAAhD,oDAAOS,gBAAD,qBAAmBQ,mBAAnB,qBAIN,GAAME,aAAY,CAAGlB,OAAO,CAAC,UAAM,CACjC,MAAO,CACLY,SAAS,CAAE,CACTA,SADS,CACTA,SADS,CAETE,eAFS,CAETA,eAFS,CAGTD,YAHS,CAGTA,YAHS,CAITL,gBAJS,CAITA,gBAJS,CAKTQ,mBAAAA,CAAAA,mBALS,CADN,CAAP,CASD,CAV2B,CAUzB,CACDJ,SADC,CAEDE,eAFC,CAGDD,YAHC,CAIDL,gBAJC,CAKDQ,mBALC,CAVyB,CAA5B,CAkBAjB,KAAK,CAACoB,SAANpB,CAAgB,UAAM,CACpB,GAAIqB,kBAAsB,CAAG,IAA7B,CAEA,GAAIC,QAAQ,CAACC,EAATD,GAAgB,KAApB,CAA2B,CACzBD,iBAAiB,CAAIG,2BAAAA,CAAD,CAAsB,CACxC,GAAIA,CAAC,CAACC,GAAFD,GAAU,QAAd,CAAwB,CACtB,GAAIpB,6BAA6B,CAACsB,MAA9BtB,EAAAA,CAAyC,CAA7C,CAAgD,CAC9C,GAAMuB,YAAgB,CAAGvB,6BAA6B,CAACwB,GAA9BxB,EAAzB,CACAuB,WAAW,EAAA,CACZ,CACF,CACF,CAPDN,CAQAQ,QAAQ,CAACC,gBAATD,CAA0B,SAA1BA,CAAqCR,iBAArCQ,CAAAA,CACD,CAED,MAAO,WAAM,CACX,GAAIP,QAAQ,CAACC,EAATD,GAAgB,KAApB,CAA2B,CACzBO,QAAQ,CAACE,mBAATF,CAA6B,SAA7BA,CAAwCR,iBAAxCQ,CAAAA,CACD,CACF,CAJD,CAKD,CApBD7B,CAoBG,EApBHA,CAAAA,CAsBA,MACE,MAAA,CAAA,aAAA,CAAC,aAAD,CAAe,QAAf,CAAA,CAAwB,KAAK,CAAEmB,YAA/B,CAAA,CACGb,QADH,CADF,CAKD,CAtED,CAwEA,cAAeD,eAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"module"}