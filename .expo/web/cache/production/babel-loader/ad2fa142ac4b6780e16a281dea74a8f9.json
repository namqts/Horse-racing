{"ast":null,"code":"'use strict';var MAX_BYTES=65536;var MAX_UINT32=4294967295;function oldBrowser(){throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11');}var Buffer=require('safe-buffer').Buffer;var crypto=global.crypto||global.msCrypto;if(crypto&&crypto.getRandomValues){module.exports=randomBytes;}else{module.exports=oldBrowser;}function randomBytes(size,cb){if(size>MAX_UINT32)throw new RangeError('requested too many random bytes');var bytes=Buffer.allocUnsafe(size);if(size>0){if(size>MAX_BYTES){for(var generated=0;generated<size;generated+=MAX_BYTES){crypto.getRandomValues(bytes.slice(generated,generated+MAX_BYTES));}}else{crypto.getRandomValues(bytes);}}if(typeof cb==='function'){return process.nextTick(function(){cb(null,bytes);});}return bytes;}","map":{"version":3,"names":["MAX_BYTES","MAX_UINT32","oldBrowser","Error","Buffer","require","crypto","global","msCrypto","getRandomValues","module","exports","randomBytes","size","cb","RangeError","bytes","allocUnsafe","generated","slice","process","nextTick"],"sources":["C:/Users/Nam-QTS/AppData/Roaming/nvm/v14.18.1/node_modules/expo-cli/node_modules/randombytes/browser.js"],"sourcesContent":["'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n"],"mappings":"AAAA,YAAY,CAIZ,GAAIA,UAAS,CAAG,KAAK,CAIrB,GAAIC,WAAU,CAAG,UAAU,CAE3B,QAASC,WAAU,EAAI,CACrB,KAAM,IAAIC,MAAK,CAAC,gHAAgH,CAAC,CACnI,CAEA,GAAIC,OAAM,CAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,MAAM,CAC1C,GAAIE,OAAM,CAAGC,MAAM,CAACD,MAAM,EAAIC,MAAM,CAACC,QAAQ,CAE7C,GAAIF,MAAM,EAAIA,MAAM,CAACG,eAAe,CAAE,CACpCC,MAAM,CAACC,OAAO,CAAGC,WAAW,CAC9B,CAAC,IAAM,CACLF,MAAM,CAACC,OAAO,CAAGT,UAAU,CAC7B,CAEA,QAASU,YAAW,CAAEC,IAAI,CAAEC,EAAE,CAAE,CAE9B,GAAID,IAAI,CAAGZ,UAAU,CAAE,KAAM,IAAIc,WAAU,CAAC,iCAAiC,CAAC,CAE9E,GAAIC,MAAK,CAAGZ,MAAM,CAACa,WAAW,CAACJ,IAAI,CAAC,CAEpC,GAAIA,IAAI,CAAG,CAAC,CAAE,CACZ,GAAIA,IAAI,CAAGb,SAAS,CAAE,CAEpB,IAAK,GAAIkB,UAAS,CAAG,CAAC,CAAEA,SAAS,CAAGL,IAAI,CAAEK,SAAS,EAAIlB,SAAS,CAAE,CAGhEM,MAAM,CAACG,eAAe,CAACO,KAAK,CAACG,KAAK,CAACD,SAAS,CAAEA,SAAS,CAAGlB,SAAS,CAAC,CAAC,CACvE,CACF,CAAC,IAAM,CACLM,MAAM,CAACG,eAAe,CAACO,KAAK,CAAC,CAC/B,CACF,CAEA,GAAI,MAAOF,GAAE,GAAK,UAAU,CAAE,CAC5B,MAAOM,QAAO,CAACC,QAAQ,CAAC,UAAY,CAClCP,EAAE,CAAC,IAAI,CAAEE,KAAK,CAAC,CACjB,CAAC,CAAC,CACJ,CAEA,MAAOA,MAAK,CACd"},"metadata":{},"sourceType":"script"}