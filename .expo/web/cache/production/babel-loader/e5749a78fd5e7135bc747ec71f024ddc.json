{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useMemo,useState}from\"react\";import{useControlledState}from\"@react-stately/utils\";var $eaf77ba5e143129c6bb329a6e66020d3$var$instance=Math.round(Math.random()*10000000000);var $eaf77ba5e143129c6bb329a6e66020d3$var$i=0;export function useRadioGroupState(props){var name=useMemo(function(){return props.name||\"radio-group-\"+$eaf77ba5e143129c6bb329a6e66020d3$var$instance+\"-\"+ ++$eaf77ba5e143129c6bb329a6e66020d3$var$i;},[props.name]);var _useControlledState=useControlledState(props.value,props.defaultValue,props.onChange),_useControlledState2=_slicedToArray(_useControlledState,2),selectedValue=_useControlledState2[0],setSelected=_useControlledState2[1];var _useState=useState(null),_useState2=_slicedToArray(_useState,2),lastFocusedValue=_useState2[0],setLastFocusedValue=_useState2[1];var setSelectedValue=function setSelectedValue(value){if(!props.isReadOnly){setSelected(value);}};return{name:name,selectedValue:selectedValue,setSelectedValue:setSelectedValue,lastFocusedValue:lastFocusedValue,setLastFocusedValue:setLastFocusedValue};}","map":{"version":3,"sources":["packages/@react-stately/radio/src/useRadioGroupState.ts"],"names":["instance","Math","round","random","i","useRadioGroupState","props","name","useMemo","selectedValue","setSelected","useControlledState","value","defaultValue","onChange","lastFocusedValue","setLastFocusedValue","useState","setSelectedValue","isReadOnly"],"mappings":"0JAqCA,GAAIA,+CAAQ,CAAGC,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,MAALF,EAAAA,CAAgB,WAA3BA,CAAf,CACA,GAAIG,wCAAC,CAAG,CAAR,C,MAMO,SAASC,mBAAT,CAA4BC,KAA5B,CAAsE,CAE3E,GAAIC,KAAI,CAAGC,OAAO,CAAC,iBAAMF,MAAK,CAACC,IAAND,EAAAA,cAAAA,CAA6BN,8CAA7BM,CAAAA,GAAAA,CAAyC,GAAEF,uCAAlD,GAAuD,CAACE,KAAK,CAACC,IAAP,CAAvD,CAAlB,CACA,wBAAmCI,kBAAkB,CAACL,KAAK,CAACM,KAAP,CAAcN,KAAK,CAACO,YAApB,CAAkCP,KAAK,CAACQ,QAAxC,CAArD,4DAAKL,aAAD,yBAAgBC,WAAhB,yBACJ,cAA8CO,QAAQ,CAAC,IAAD,CAAtD,wCAAKF,gBAAD,eAAmBC,mBAAnB,eAEJ,GAAIE,iBAAgB,CAAIN,QAApBM,iBAAgB,CAAIN,KAAD,CAAW,CAChC,GAAI,CAACN,KAAK,CAACa,UAAX,CAAuB,CACrBT,WAAW,CAACE,KAAD,CAAXF,CACD,CACF,CAJD,CAMA,MAAO,CACLH,IADK,CACLA,IADK,CAELE,aAFK,CAELA,aAFK,CAGLS,gBAHK,CAGLA,gBAHK,CAILH,gBAJK,CAILA,gBAJK,CAKLC,mBAAAA,CAAAA,mBALK,CAAP,CAOD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue\n  };\n}\n"]},"metadata":{},"sourceType":"module"}