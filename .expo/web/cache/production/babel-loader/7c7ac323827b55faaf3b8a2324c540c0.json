{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"startColor\",\"endColor\",\"lines\",\"isLoaded\",\"_line\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{usePropsResolution}from\"../../../hooks\";import{Stack}from\"../../primitives/Stack\";import Skeleton from\"./Skeleton\";var SkeletonText=function SkeletonText(props,ref){var _usePropsResolution=usePropsResolution('SkeletonText',props),children=_usePropsResolution.children,startColor=_usePropsResolution.startColor,endColor=_usePropsResolution.endColor,lines=_usePropsResolution.lines,isLoaded=_usePropsResolution.isLoaded,_line=_usePropsResolution._line,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var computedChildren=[];for(var i=0;i<lines;i++){if(i===lines-1&&lines!==1){computedChildren.push(React.createElement(Skeleton,_extends({key:i,endColor:endColor,startColor:startColor,w:\"75%\"},_line)));}else computedChildren.push(React.createElement(Skeleton,_extends({key:i,endColor:endColor,startColor:startColor},_line)));}return isLoaded?children:React.createElement(Stack,_extends({},resolvedProps,{ref:ref}),computedChildren);};export default memo(forwardRef(SkeletonText));","map":{"version":3,"sources":["SkeletonText.tsx"],"names":["React","memo","forwardRef","usePropsResolution","Stack","Skeleton","SkeletonText","props","ref","children","startColor","endColor","lines","isLoaded","_line","resolvedProps","computedChildren","i","push"],"mappings":"0bAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,kBAAT,sBACA,OAASC,KAAT,8BACA,MAAOC,SAAP,kBAGA,GAAMC,aAAY,CAAG,QAAfA,aAAY,CAEhBC,KAFmB,CAGnBC,GAHmB,CAIhB,CAEH,wBAQIL,kBAAkB,CAAC,cAAD,CAAiBI,KAAjB,CARtB,CACEE,QADI,qBACJA,QADI,CAEJC,UAFI,qBAEJA,UAFI,CAGJC,QAHI,qBAGJA,QAHI,CAIJC,KAJI,qBAIJA,KAJI,CAKJC,QALI,qBAKJA,QALI,CAMJC,KANI,qBAMJA,KANI,CAODC,aAAAA,yDAGL,GAAMC,iBAAgB,CAAG,EAZtB,CAcH,IAAK,GAAIC,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,KAApB,CAA2BK,CAAC,EAA5B,CAAgC,CAE9B,GAAIA,CAAC,GAAKL,KAAK,CAAG,CAAdK,EAAmBL,KAAK,GAAK,CAAjC,CAAoC,CAClCI,gBAAgB,CAACE,IAAjBF,CAEE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,QAAA,CAAA,CACE,GAAG,CAAEC,CADP,CAEE,QAAQ,CAAEN,QAFZ,CAGE,UAAU,CAAED,UAHd,CAIE,CAAC,CAAC,KAJJ,CAAA,CAKMI,KALN,CAAA,CAFFE,CAAAA,CAUD,CAXD,IAYEA,iBAAgB,CAACE,IAAjBF,CACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,QAAA,CAAA,CACE,GAAG,CAAEC,CADP,CAEE,QAAQ,CAAEN,QAFZ,CAGE,UAAU,CAAED,UAHd,CAAA,CAIMI,KAJN,CAAA,CADFE,CAAAA,CAQH,CACD,MAAOH,SAAQ,CACbJ,QADa,CAGb,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CAAWM,aAAX,CAAA,CAA0B,GAAG,CAAEP,GAA/B,CAAA,CAAA,CACGQ,gBADH,CAHF,CAOD,CAhDD,CAkDA,cAAef,KAAI,CAACC,UAAU,CAACI,YAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Stack } from '../../primitives/Stack';\nimport Skeleton from './Skeleton';\nimport type { ISkeletonTextProps } from './types';\n\nconst SkeletonText = (\n  //@ts-ignore\n  props: ISkeletonTextProps,\n  ref: any\n) => {\n  // const { children, ...props } = allProps;\n  const {\n    children,\n    startColor,\n    endColor,\n    lines,\n    isLoaded,\n    _line,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n\n  const computedChildren = [];\n  //generating an array of skeleton components (same length as noOfLines)\n  for (let i = 0; i < lines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === lines - 1 && lines !== 1) {\n      computedChildren.push(\n        //Using Skeleton component with required props\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          w=\"75%\"\n          {..._line}\n        />\n      );\n    } else\n      computedChildren.push(\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          {..._line}\n        />\n      );\n  }\n  return isLoaded ? (\n    children\n  ) : (\n    <Stack {...resolvedProps} ref={ref}>\n      {computedChildren}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(SkeletonText));\n"]},"metadata":{},"sourceType":"module"}