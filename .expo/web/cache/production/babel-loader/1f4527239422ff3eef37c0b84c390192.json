{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React,{useState,useEffect}from'react';import{HybridContext}from\"./../hybrid-overlay/Context\";import AppState from\"react-native-web/dist/exports/AppState\";import _useColorScheme from\"react-native-web/dist/exports/useColorScheme\";import{useSubscription}from'use-subscription';import{useNativeBaseConfig}from\"../NativeBaseContext\";export var useColorMode=function useColorMode(){var _React$useContext=React.useContext(HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};export function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}export var useAppState=function useAppState(){var subscription=React.useMemo(function(){return{getCurrentValue:function getCurrentValue(){return AppState.currentState;},subscribe:function subscribe(callback){AppState.addEventListener('change',callback);return function(){return AppState.removeEventListener('change',callback);};}};},[]);var isSSR=useNativeBaseConfig('useBreakpointResolvedProps').isSSR;if(isSSR){return'unknown';}else{return useSubscription(subscription);}};export var useColorScheme=function useColorScheme(){var colorScheme=_useColorScheme();var _useState=useState(colorScheme),_useState2=_slicedToArray(_useState,2),currentScheme=_useState2[0],setCurrentScheme=_useState2[1];var appState=useAppState();useEffect(function(){if(appState==='active'){setCurrentScheme(colorScheme);}},[appState,colorScheme]);return currentScheme;};export function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=useColorScheme();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState3=useState(initialColorMode),_useState4=_slicedToArray(_useState3,2),colorMode=_useState4[0],setRawMode=_useState4[1];var setColorMode=React.useCallback(function _callee(val){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!colorModeManager){_context.next=3;break;}_context.next=3;return _regeneratorRuntime.awrap(colorModeManager.set(val));case 3:setRawMode(val);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);},[colorModeManager]);useEffect(function(){if(colorModeManager){(function getMode(){var value;return _regeneratorRuntime.async(function getMode$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));case 2:value=_context2.sent;if(value&&value!==colorMode){setRawMode(value);}case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);})();}},[colorMode,initialColorMode,colorModeManager]);useEffect(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}export function useAccessibleColors(){var _React$useContext2=React.useContext(HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}","map":{"version":3,"sources":["hooks.tsx"],"names":["React","useState","useEffect","HybridContext","useSubscription","useNativeBaseConfig","useColorMode","colorMode","colorModeContext","useContext","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","AppState","currentState","subscribe","callback","addEventListener","removeEventListener","isSSR","useColorScheme","colorScheme","_useColorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        AppState.addEventListener('change', callback);\n        return () => AppState.removeEventListener('change', callback);\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSubscription(subscription);\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}