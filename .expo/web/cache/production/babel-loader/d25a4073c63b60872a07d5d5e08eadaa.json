{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"],_excluded2=[\"_astrick\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import Text from\"../../primitives/Text\";import{useFormControlContext}from\"./useFormControl\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{mergeRefs}from\"../../../utils\";import{combineContextAndProps}from\"../../../utils\";var FormControlLabel=function FormControlLabel(_ref2,ref){var children=_ref2.children,props=_objectWithoutProperties(_ref2,_excluded);var formControlContext=useFormControlContext();var combinedProps=combineContextAndProps(formControlContext,props);var _ref=React.useRef(null);var _usePropsResolution=usePropsResolution('FormControlLabel',combinedProps,{isDisabled:combinedProps.isDisabled,isReadOnly:combinedProps.isReadOnly,isInvalid:combinedProps.isInvalid}),_astrick=_usePropsResolution._astrick,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var requiredAsterisk=function requiredAsterisk(){return React.createElement(Text,_extends({_web:{accessibilityHidden:true,accessibilityRole:'presentation'}},_astrick),\"*\");};var mergedRef=mergeRefs([_ref,ref]);React.useEffect(function(){if(_ref.current){if(props.htmlFor){_ref.current.htmlFor=props.htmlFor;}else if(resolvedProps!==null&&resolvedProps!==void 0&&resolvedProps.nativeID){_ref.current.htmlFor=resolvedProps.nativeID;}}},[resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.nativeID,props.htmlFor]);return React.createElement(Box,_extends({_web:{accessibilityRole:'label'}},resolvedProps,{nativeID:resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.labelId,ref:mergedRef}),children,(resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.isRequired)&&requiredAsterisk());};export default memo(forwardRef(FormControlLabel));","map":{"version":3,"sources":["FormControlLabel.tsx"],"names":["React","memo","forwardRef","Box","Text","useFormControlContext","usePropsResolution","mergeRefs","combineContextAndProps","FormControlLabel","children","props","ref","formControlContext","combinedProps","_ref","useRef","_astrick","resolvedProps","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isRequired"],"mappings":"+ZAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,IAAP,4BACA,MAAOC,KAAP,6BACA,OAASC,qBAAT,wBACA,OAASC,kBAAT,oCAEA,OAASC,SAAT,sBACA,OAASC,sBAAT,sBAEA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,OAEpBG,GAFuB,CAGpB,IAFDF,SAAF,OAAEA,QAAF,CAAeC,KAAAA,2CAGf,GAAME,mBAAkB,CAAGR,qBAAqB,EAAhD,CACA,GAAMS,cAAa,CAAGN,sBAAsB,CAACK,kBAAD,CAAqBF,KAArB,CAA5C,CACA,GAAMI,KAAI,CAAGf,KAAK,CAACgB,MAANhB,CAA+B,IAA/BA,CAAb,CACA,wBAAuCM,kBAAkB,CACvD,kBADuD,CAEvDQ,aAFuD,CAGvD,CACEK,UAAU,CAAEL,aAAa,CAACK,UAD5B,CAEEC,UAAU,CAAEN,aAAa,CAACM,UAF5B,CAGEC,SAAS,CAAEP,aAAa,CAH1B,SAAA,CAHuD,CAAzD,CAAQG,QAAF,qBAAEA,QAAF,CAAeC,aAAAA,0DAWrB,GAAMI,iBAAgB,CAAG,QAAnBA,iBAAgB,SACpB,MAAA,CAAA,aAAA,CAAC,IAAD,CAAA,QAAA,CAAA,CACE,IAAI,CAAE,CACJC,mBAAmB,CAAE,IADjB,CAGJC,iBAAiB,CAAE,cAHf,CADR,CAAA,CAMMP,QANN,CAAA,CAAA,GAAA,CADF,GAYA,GAAMQ,UAAS,CAAGlB,SAAS,CAAC,CAACQ,IAAD,CAAOH,GAAP,CAAD,CAA3B,CACAZ,KAAK,CAAC0B,SAAN1B,CAAgB,UAAM,CACpB,GAAIe,IAAI,CAACY,OAAT,CAAkB,CAEhB,GAAIhB,KAAK,CAACiB,OAAV,CAAmB,CACjBb,IAAI,CAACY,OAALZ,CAAaa,OAAbb,CAAuBJ,KAAK,CAACiB,OAA7Bb,CACD,CAFD,IAEO,IAAIG,aAAJ,GAAA,IAAA,EAAIA,aAAJ,GAAA,IAAA,EAAA,EAAIA,aAAa,CAAEW,QAAnB,CAA6B,CAClCd,IAAI,CAACY,OAALZ,CAAaa,OAAbb,CAAuBG,aAAa,CAACW,QAArCd,CACD,CACF,CACF,CATDf,CASG,CAACkB,aAAD,GAAA,IAAA,EAACA,aAAD,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAACA,aAAa,CAAEW,QAAhB,CAA0BlB,KAAK,CAACiB,OAAhC,CATH5B,CAAAA,CAWA,MACE,MAAA,CAAA,aAAA,CAAC,GAAD,CAAA,QAAA,CAAA,CACE,IAAI,CAAE,CAEJwB,iBAAiB,CAAE,OAFf,CADR,CAAA,CAKMN,aALN,CAAA,CAME,QAAQ,CAAEA,aAAF,GAAA,IAAA,EAAEA,aAAF,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAEA,aAAa,CAAEY,OAN3B,CAOE,GAAG,CAAEL,SAPP,CAAA,CAAA,CASGf,QATH,CAUG,CAAA,aAAa,GAAA,IAAb,EAAA,aAAa,GAAA,IAAA,EAAb,CAAA,IAAA,EAAA,CAAA,aAAa,CAAEqB,UAAf,GAA6BT,gBAAgB,EAVhD,CADF,CAcD,CAxDD,CAyDA,cAAerB,KAAI,CAACC,UAAU,CAACO,gBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { _astrick, ...resolvedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      {..._astrick}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps?.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...resolvedProps}\n      nativeID={resolvedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {resolvedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]},"metadata":{},"sourceType":"module"}