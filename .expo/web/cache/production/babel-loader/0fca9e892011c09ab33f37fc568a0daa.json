{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import React from'react';export var getResponsiveStylesImpl=function getResponsiveStylesImpl(width){return function(queries){if(typeof width==='number'){var styles=queries.initial?[StyleSheet.create({initial:StyleSheet.flatten(queries.initial)}).initial]:[];if(queries.query){queries.query.forEach(function(queryRule){if(queryRule.style){var flattenQueryStyle=StyleSheet.flatten(queryRule.style);if(typeof queryRule.maxWidth==='number'&&typeof queryRule.minWidth==='number'){if(width>=queryRule.minWidth&&width<=queryRule.maxWidth){styles.push(StyleSheet.create({rangeStyle:flattenQueryStyle}).rangeStyle);}}else if(typeof queryRule.minWidth==='number'){if(width>=queryRule.minWidth){styles.push(StyleSheet.create({minWidthStyle:flattenQueryStyle}).minWidthStyle);}}else if(typeof queryRule.maxWidth==='number'){if(width<=queryRule.maxWidth){styles.push(StyleSheet.create({maxWidthStyle:flattenQueryStyle}).maxWidthStyle);}}}});return{styles:styles};}}return{};};};export var useDimensionsWithEnable=function useDimensionsWithEnable(_ref){var enable=_ref.enable;var _React$useState=React.useState(function(){return Dimensions.get('window');}),_React$useState2=_slicedToArray(_React$useState,2),dimensions=_React$useState2[0],setDimensions=_React$useState2[1];React.useEffect(function(){if(enable){function handleChange(_ref2){var window=_ref2.window;if(dimensions.width!==window.width||dimensions.height!==window.height||dimensions.scale!==window.scale||dimensions.fontScale!==window.fontScale){setDimensions(window);}}Dimensions.addEventListener('change',handleChange);handleChange({window:Dimensions.get('window')});return function(){Dimensions.removeEventListener('change',handleChange);};}return function(){};},[dimensions,enable]);return dimensions;};","map":{"version":3,"sources":["common.ts"],"names":["React","getResponsiveStylesImpl","width","queries","styles","initial","create","StyleSheet","flatten","query","forEach","queryRule","style","flattenQueryStyle","maxWidth","minWidth","push","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","dimensions","setDimensions","useState","Dimensions","get","useEffect","handleChange","window","height","scale","fontScale","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}