{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useEffect as $cKEhs$useEffect}from\"react\";import{useToggle as $cKEhs$useToggle}from\"@react-aria/toggle\";import{filterDOMProps as $cKEhs$filterDOMProps,mergeProps as $cKEhs$mergeProps}from\"@react-aria/utils\";import{useField as $cKEhs$useField}from\"@react-aria/label\";import{useToggleState as $cKEhs$useToggleState}from\"@react-stately/toggle\";function $406796ff087fe49b$export$e375f10ce42261c5(props,state,inputRef){var _$cKEhs$useToggle=$cKEhs$useToggle(props,state,inputRef),inputProps=_$cKEhs$useToggle.inputProps;var isSelected=state.isSelected;var isIndeterminate=props.isIndeterminate;$cKEhs$useEffect(function(){if(inputRef.current)inputRef.current.indeterminate=isIndeterminate;});return{inputProps:_objectSpread(_objectSpread({},inputProps),{},{checked:isSelected,'aria-checked':isIndeterminate?'mixed':isSelected})};}var $1ae600c947479353$export$31440636951aa68c=new WeakMap();var $1ae600c947479353$export$a3077e9c93f7360f=new WeakMap();var $1ae600c947479353$export$d5679492e2864181=new WeakMap();function $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props,state){var isDisabled=props.isDisabled,name=props.name;var _$cKEhs$useField=$cKEhs$useField(_objectSpread(_objectSpread({},props),{},{labelElementType:'span'})),labelProps=_$cKEhs$useField.labelProps,fieldProps=_$cKEhs$useField.fieldProps,descriptionProps=_$cKEhs$useField.descriptionProps,errorMessageProps=_$cKEhs$useField.errorMessageProps;$1ae600c947479353$export$a3077e9c93f7360f.set(state,descriptionProps.id);$1ae600c947479353$export$d5679492e2864181.set(state,errorMessageProps.id);var domProps=$cKEhs$filterDOMProps(props,{labelable:true});$1ae600c947479353$export$31440636951aa68c.set(state,name);return{groupProps:$cKEhs$mergeProps(domProps,_objectSpread({role:'group','aria-disabled':isDisabled||undefined},fieldProps)),labelProps:labelProps,descriptionProps:descriptionProps,errorMessageProps:errorMessageProps};}function $fba3e38d5ca8983f$export$353b32fc6898d37d(props,state,inputRef){var toggleState=$cKEhs$useToggleState({isReadOnly:props.isReadOnly||state.isReadOnly,isSelected:state.isSelected(props.value),onChange:function onChange(isSelected){if(isSelected)state.addValue(props.value);else state.removeValue(props.value);if(props.onChange)props.onChange(isSelected);}});var _$406796ff087fe49b$ex=$406796ff087fe49b$export$e375f10ce42261c5(_objectSpread(_objectSpread({},props),{},{isReadOnly:props.isReadOnly||state.isReadOnly,isDisabled:props.isDisabled||state.isDisabled,name:props.name||$1ae600c947479353$export$31440636951aa68c.get(state)}),toggleState,inputRef),inputProps=_$406796ff087fe49b$ex.inputProps;return{inputProps:_objectSpread(_objectSpread({},inputProps),{},{'aria-describedby':[state.validationState==='invalid'?$1ae600c947479353$export$d5679492e2864181.get(state):null,$1ae600c947479353$export$a3077e9c93f7360f.get(state)].filter(Boolean).join(' ')||undefined})};}export{$406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox,$1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup,$fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem};","map":{"version":3,"sources":["packages/@react-aria/checkbox/src/useCheckbox.ts","packages/@react-aria/checkbox/src/useCheckboxGroup.ts","packages/@react-aria/checkbox/src/utils.ts","packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupDescriptionIds, checkboxGroupErrorMessageIds, checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\n\nexport interface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: DOMAttributes,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: DOMAttributes,\n  /** Props for the checkbox group description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the checkbox group error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  checkboxGroupDescriptionIds.set(state, descriptionProps.id);\n  checkboxGroupErrorMessageIds.set(state, errorMessageProps.id);\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\nexport const checkboxGroupDescriptionIds = new WeakMap<CheckboxGroupState, string>();\nexport const checkboxGroupErrorMessageIds = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupDescriptionIds, checkboxGroupErrorMessageIds, checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {\n    inputProps: {\n      ...inputProps,\n      'aria-describedby': [\n        state.validationState === 'invalid' ? checkboxGroupErrorMessageIds.get(state) : null,\n        checkboxGroupDescriptionIds.get(state)\n      ].filter(Boolean).join(' ') || undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}