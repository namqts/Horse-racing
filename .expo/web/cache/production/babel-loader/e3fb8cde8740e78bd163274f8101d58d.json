{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useTypeaheadReducer}from\"./reducer\";import React,{useEffect}from'react';import*as stateChangeTypes from\"./types\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import{dropdownDefaultStateValues,getDefaultValue}from\"./utils\";function isControlledProp(props,key){return props[key]!==undefined;}export function useTypeahead(props){var defaultValues=_objectSpread({},dropdownDefaultStateValues);defaultValues.isOpen=getDefaultValue(props,'isOpen');var _React$useReducer=React.useReducer(useTypeaheadReducer,defaultValues),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var dispatchWithProps=function dispatchWithProps(object){dispatch(_objectSpread(_objectSpread({},object),{},{props:props}));};var inputValue=state.inputValue,isOpen=state.isOpen;var items=props.items,onInputValueChange=props.onInputValueChange,onSelectedItemChange=props.onSelectedItemChange,selectedItem=props.selectedItem,itemToString=props.itemToString;var isControlled=isControlledProp(props,'selectedItem');useEffect(function(){if(isControlled){dispatch({type:stateChangeTypes.ControlledPropUpdatedSelectedItem,inputValue:itemToString(selectedItem)});}},[selectedItem,isControlled,itemToString]);var onChangeText=function onChangeText(text){onInputValueChange===null||onInputValueChange===void 0?void 0:onInputValueChange({inputValue:text});dispatchWithProps({type:stateChangeTypes.InputChange,inputValue:text});};var handleItemSelect=function handleItemSelect(item,index){onSelectedItemChange===null||onSelectedItemChange===void 0?void 0:onSelectedItemChange(item);dispatchWithProps({type:stateChangeTypes.ItemClick,index:index});Keyboard.dismiss();};var getMenuItemProps=function getMenuItemProps(item,index){return{onPress:function onPress(){return handleItemSelect(item,index);},accessible:true,accessiblityRole:'menuitem'};};var getMenuProps=function getMenuProps(){return{accessible:true,accessibilityRole:'menu',accessibilityHint:\"Showing \".concat(items.length,\" records\")};};var getToggleButtonProps=function getToggleButtonProps(){return{onPress:function onPress(){dispatchWithProps({type:stateChangeTypes.ToggleButtonClick});}};};var getInputProps=function getInputProps(propInputVal,propOnchangeText){return{onChangeText:propInputVal?propOnchangeText:onChangeText,value:propInputVal?propInputVal:inputValue,accessibilityRole:'combobox',accessibilityLabel:'Typeahead input',accessibilityState:{expanded:isOpen}};};return{getInputProps:getInputProps,getMenuItemProps:getMenuItemProps,getMenuProps:getMenuProps,getToggleButtonProps:getToggleButtonProps,isOpen:isOpen};}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["useTypeaheadReducer","React","useEffect","stateChangeTypes","dropdownDefaultStateValues","getDefaultValue","isControlledProp","props","key","undefined","useTypeahead","defaultValues","isOpen","state","dispatch","useReducer","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","Keyboard","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}