{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useFormControlContext}from\"./useFormControl\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{combineContextAndProps}from\"../../../utils\";var FormControlHelperText=function FormControlHelperText(props,ref){var formControlContext=useFormControlContext();var combinedProps=combineContextAndProps(formControlContext,props);var resolvedProps=usePropsResolution('FormControlHelperText',combinedProps,{isDisabled:combinedProps.isDisabled,isReadOnly:combinedProps.isReadOnly,isInvalid:combinedProps.isInvalid});React.useEffect(function(){resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.setHasHelpText(true);return function(){resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.setHasHelpText(false);};});if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},resolvedProps,{nativeID:resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.feedbackId,ref:ref}));};export default memo(forwardRef(FormControlHelperText));","map":{"version":3,"sources":["FormControlHelperText.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useFormControlContext","useHasResponsiveProps","combineContextAndProps","FormControlHelperText","props","ref","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","useEffect","setHasHelpText","feedbackId"],"mappings":"uRAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,IAAP,4BACA,OAASC,kBAAT,oCACA,OAASC,qBAAT,wBAEA,OAASC,qBAAT,4CACA,OAASC,sBAAT,sBAEA,GAAMC,sBAAqB,CAAG,QAAxBA,sBAAqB,CACzBC,KAD4B,CAE5BC,GAF4B,CAGzB,CACH,GAAMC,mBAAkB,CAAGN,qBAAqB,EAAhD,CACA,GAAMO,cAAa,CAAGL,sBAAsB,CAACI,kBAAD,CAAqBF,KAArB,CAA5C,CACA,GAAMI,cAAa,CAAGT,kBAAkB,CACtC,uBADsC,CAEtCQ,aAFsC,CAGtC,CACEE,UAAU,CAAEF,aAAa,CAACE,UAD5B,CAEEC,UAAU,CAAEH,aAAa,CAACG,UAF5B,CAGEC,SAAS,CAAEJ,aAAa,CAH1B,SAAA,CAHsC,CAAxC,CAWAZ,KAAK,CAACiB,SAANjB,CAAgB,UAAM,CACpBa,aAAa,GAAA,IAAbA,EAAAA,aAAa,GAAA,IAAA,EAAbA,CAAAA,IAAAA,EAAAA,CAAAA,aAAa,CAAEK,cAAfL,CAA8B,IAA9BA,CAAAA,CACA,MAAO,WAAM,CACXA,aAAa,GAAA,IAAbA,EAAAA,aAAa,GAAA,IAAA,EAAbA,CAAAA,IAAAA,EAAAA,CAAAA,aAAa,CAAEK,cAAfL,CAA8B,KAA9BA,CAAAA,CACD,CAFD,CAGD,CALDb,CAdG,CAqBH,GAAIM,qBAAqB,CAACG,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,MAAA,CAAA,aAAA,CAAC,GAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CAASI,aAAT,CAAA,CAAwB,QAAQ,CAAEA,aAAF,GAAA,IAAA,EAAEA,aAAF,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAEA,aAAa,CAAEM,UAAjD,CAA6D,GAAG,CAAET,GAAlE,CAAA,CAAA,CADF,CAGD,CA/BD,CAiCA,cAAeT,KAAI,CAACC,UAAU,CAACM,qBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"module"}