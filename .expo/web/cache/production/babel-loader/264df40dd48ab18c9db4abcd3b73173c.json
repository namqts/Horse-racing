{"ast":null,"code":";(function(root){var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;var freeModule=typeof module=='object'&&module&&!module.nodeType&&module;var freeGlobal=typeof global=='object'&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal||freeGlobal.self===freeGlobal){root=freeGlobal;}var punycode,maxInt=2147483647,base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,delimiter='-',regexPunycode=/^xn--/,regexNonASCII=/[^\\x20-\\x7E]/,regexSeparators=/[\\x2E\\u3002\\uFF0E\\uFF61]/g,errors={'overflow':'Overflow: input needs wider integers to process','not-basic':'Illegal input >= 0x80 (not a basic code point)','invalid-input':'Invalid input'},baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode,key;function error(type){throw new RangeError(errors[type]);}function map(array,fn){var length=array.length;var result=[];while(length--){result[length]=fn(array[length]);}return result;}function mapDomain(string,fn){var parts=string.split('@');var result='';if(parts.length>1){result=parts[0]+'@';string=parts[1];}string=string.replace(regexSeparators,'\\x2E');var labels=string.split('.');var encoded=map(labels,fn).join('.');return result+encoded;}function ucs2decode(string){var output=[],counter=0,length=string.length,value,extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=0xD800&&value<=0xDBFF&&counter<length){extra=string.charCodeAt(counter++);if((extra&0xFC00)==0xDC00){output.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{output.push(value);counter--;}}else{output.push(value);}}return output;}function ucs2encode(array){return map(array,function(value){var output='';if(value>0xFFFF){value-=0x10000;output+=stringFromCharCode(value>>>10&0x3FF|0xD800);value=0xDC00|value&0x3FF;}output+=stringFromCharCode(value);return output;}).join('');}function basicToDigit(codePoint){if(codePoint-48<10){return codePoint-22;}if(codePoint-65<26){return codePoint-65;}if(codePoint-97<26){return codePoint-97;}return base;}function digitToBasic(digit,flag){return digit+22+75*(digit<26)-((flag!=0)<<5);}function adapt(delta,numPoints,firstTime){var k=0;delta=firstTime?floor(delta/damp):delta>>1;delta+=floor(delta/numPoints);for(;delta>baseMinusTMin*tMax>>1;k+=base){delta=floor(delta/baseMinusTMin);}return floor(k+(baseMinusTMin+1)*delta/(delta+skew));}function decode(input){var output=[],inputLength=input.length,out,i=0,n=initialN,bias=initialBias,basic,j,index,oldi,w,k,digit,t,baseMinusT;basic=input.lastIndexOf(delimiter);if(basic<0){basic=0;}for(j=0;j<basic;++j){if(input.charCodeAt(j)>=0x80){error('not-basic');}output.push(input.charCodeAt(j));}for(index=basic>0?basic+1:0;index<inputLength;){for(oldi=i,w=1,k=base;;k+=base){if(index>=inputLength){error('invalid-input');}digit=basicToDigit(input.charCodeAt(index++));if(digit>=base||digit>floor((maxInt-i)/w)){error('overflow');}i+=digit*w;t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(digit<t){break;}baseMinusT=base-t;if(w>floor(maxInt/baseMinusT)){error('overflow');}w*=baseMinusT;}out=output.length+1;bias=adapt(i-oldi,out,oldi==0);if(floor(i/out)>maxInt-n){error('overflow');}n+=floor(i/out);i%=out;output.splice(i++,0,n);}return ucs2encode(output);}function encode(input){var n,delta,handledCPCount,basicLength,bias,j,m,q,k,t,currentValue,output=[],inputLength,handledCPCountPlusOne,baseMinusT,qMinusT;input=ucs2decode(input);inputLength=input.length;n=initialN;delta=0;bias=initialBias;for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<0x80){output.push(stringFromCharCode(currentValue));}}handledCPCount=basicLength=output.length;if(basicLength){output.push(delimiter);}while(handledCPCount<inputLength){for(m=maxInt,j=0;j<inputLength;++j){currentValue=input[j];if(currentValue>=n&&currentValue<m){m=currentValue;}}handledCPCountPlusOne=handledCPCount+1;if(m-n>floor((maxInt-delta)/handledCPCountPlusOne)){error('overflow');}delta+=(m-n)*handledCPCountPlusOne;n=m;for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<n&&++delta>maxInt){error('overflow');}if(currentValue==n){for(q=delta,k=base;;k+=base){t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(q<t){break;}qMinusT=q-t;baseMinusT=base-t;output.push(stringFromCharCode(digitToBasic(t+qMinusT%baseMinusT,0)));q=floor(qMinusT/baseMinusT);}output.push(stringFromCharCode(digitToBasic(q,0)));bias=adapt(delta,handledCPCountPlusOne,handledCPCount==basicLength);delta=0;++handledCPCount;}}++delta;++n;}return output.join('');}function toUnicode(input){return mapDomain(input,function(string){return regexPunycode.test(string)?decode(string.slice(4).toLowerCase()):string;});}function toASCII(input){return mapDomain(input,function(string){return regexNonASCII.test(string)?'xn--'+encode(string):string;});}punycode={'version':'1.4.1','ucs2':{'decode':ucs2decode,'encode':ucs2encode},'decode':decode,'encode':encode,'toASCII':toASCII,'toUnicode':toUnicode};if(typeof define=='function'&&typeof define.amd=='object'&&define.amd){define('punycode',function(){return punycode;});}else if(freeExports&&freeModule){if(module.exports==freeExports){freeModule.exports=punycode;}else{for(key in punycode){punycode.hasOwnProperty(key)&&(freeExports[key]=punycode[key]);}}}else{root.punycode=punycode;}})(this);","map":{"version":3,"names":["root","freeExports","exports","nodeType","freeModule","module","freeGlobal","global","window","self","punycode","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","key","error","type","RangeError","map","array","fn","length","result","mapDomain","string","parts","split","replace","labels","encoded","join","ucs2decode","output","counter","value","extra","charCodeAt","push","ucs2encode","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","out","i","n","bias","basic","j","index","oldi","w","t","baseMinusT","lastIndexOf","splice","encode","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","test","slice","toLowerCase","toASCII","define","amd","hasOwnProperty"],"sources":["C:/Users/Nam-QTS/AppData/Roaming/nvm/v14.18.1/node_modules/expo-cli/node_modules/node-libs-browser/node_modules/punycode/punycode.js"],"sourcesContent":["/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}