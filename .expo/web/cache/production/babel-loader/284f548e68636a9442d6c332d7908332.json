{"ast":null,"code":"import React from'react';import{useEffect}from'react';import BackHandler from\"react-native-web/dist/exports/BackHandler\";var keyboardDismissHandlers=[];export var keyboardDismissHandlerManager={push:function push(handler){keyboardDismissHandlers.push(handler);return function(){keyboardDismissHandlers=keyboardDismissHandlers.filter(function(h){return h!==handler;});};},length:function length(){return keyboardDismissHandlers.length;},pop:function pop(){return keyboardDismissHandlers.pop();}};export var useKeyboardDismissable=function useKeyboardDismissable(_ref){var enabled=_ref.enabled,callback=_ref.callback;React.useEffect(function(){var cleanupFn=function cleanupFn(){};if(enabled){cleanupFn=keyboardDismissHandlerManager.push(callback);}else{cleanupFn();}return function(){cleanupFn();};},[enabled,callback]);useBackHandler({enabled:enabled,callback:callback});};export function useBackHandler(_ref2){var enabled=_ref2.enabled,callback=_ref2.callback;useEffect(function(){var backHandler=function backHandler(){callback();return true;};if(enabled){BackHandler.addEventListener('hardwareBackPress',backHandler);}else{BackHandler.removeEventListener('hardwareBackPress',backHandler);}return function(){return BackHandler.removeEventListener('hardwareBackPress',backHandler);};},[enabled,callback]);}","map":{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["React","useEffect","keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","cleanupFn","useBackHandler","backHandler","BackHandler","addEventListener","removeEventListener"],"mappings":"AAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,KAA0B,OAA1B,CAAA,mEAQA,GAAIC,wBAAyC,CAAG,EAAhD,CACA,MAAO,IAAMC,8BAA6B,CAAG,CAC3CC,IAAI,CAAGC,cAAAA,OAAD,CAAwB,CAC5BH,uBAAuB,CAACE,IAAxBF,CAA6BG,OAA7BH,CAAAA,CACA,MAAO,WAAM,CACXA,uBAAuB,CAAGA,uBAAuB,CAACI,MAAxBJ,CACvBK,SAAAA,CAAD,QAAOA,EAAC,GAAKF,OADWH,GAA1BA,CAGD,CAJD,CAKD,CAR0C,CAS3CM,MAAM,CAAE,wBAAMN,wBAAuB,CAACM,MATK,GAU3CC,GAAG,CAAE,cAAM,CACT,MAAOP,wBAAuB,CAACO,GAAxBP,EAAP,CACD,CAZ0C,CAAtC,CAkBP,MAAO,IAAMQ,uBAAsB,CAAG,QAAzBA,uBAAsB,MAAuC,IAAjCC,QAAF,MAAEA,OAAF,CAAWC,QAAAA,MAAAA,QAAAA,CAChDZ,KAAK,CAACC,SAAND,CAAgB,UAAM,CACpB,GAAIa,UAAS,CAAG,oBAAM,CAAE,CAAxB,CACA,GAAIF,OAAJ,CAAa,CACXE,SAAS,CAAGV,6BAA6B,CAACC,IAA9BD,CAAmCS,QAAnCT,CAAZU,CACD,CAFD,IAEO,CACLA,SAAS,EAAA,CACV,CACD,MAAO,WAAM,CACXA,SAAS,EAAA,CACV,CAFD,CAGD,CAVDb,CAUG,CAACW,OAAD,CAAUC,QAAV,CAVHZ,CAAAA,CAYAc,cAAc,CAAC,CAAEH,OAAF,CAAEA,OAAF,CAAWC,QAAAA,CAAAA,QAAX,CAAD,CAAdE,CACD,CAdM,CAgBP,MAAO,SAASA,eAAT,OAAwD,IAA9BH,QAAF,OAAEA,OAAF,CAAWC,QAAAA,OAAAA,QAAAA,CACxCX,SAAS,CAAC,UAAM,CACd,GAAIc,YAAW,CAAG,QAAdA,YAAW,EAAS,CACtBH,QAAQ,EAAA,CACR,MAAO,KAAP,CACD,CAHD,CAIA,GAAID,OAAJ,CAAa,CACXK,WAAW,CAACC,gBAAZD,CAA6B,mBAA7BA,CAAkDD,WAAlDC,CAAAA,CACD,CAFD,IAEO,CACLA,WAAW,CAACE,mBAAZF,CAAgC,mBAAhCA,CAAqDD,WAArDC,CAAAA,CACD,CACD,MAAO,kBACLA,YAAW,CAACE,mBAAZF,CAAgC,mBAAhCA,CAAqDD,WAArDC,CADF,GAED,CAZQ,CAYN,CAACL,OAAD,CAAUC,QAAV,CAZM,CAATX,CAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]},"metadata":{},"sourceType":"module"}