{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks\";import{AlertDialogContext}from\"./Context\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertDialogContent=function AlertDialogContent(props,ref){var newProps=usePropsResolution('AlertDialogContent',props);var _React$useContext=React.useContext(AlertDialogContext),contentSize=_React$useContext.contentSize,initialFocusRef=_React$useContext.initialFocusRef,finalFocusRef=_React$useContext.finalFocusRef,handleClose=_React$useContext.handleClose;React.useEffect(function(){var finalRefVal=finalFocusRef?finalFocusRef.current:null;if(initialFocusRef&&initialFocusRef.current){initialFocusRef.current.focus();}return function(){if(finalRefVal){finalRefVal.focus();}};},[initialFocusRef,finalFocusRef]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},contentSize,newProps,{ref:ref,onAccessibilityEscape:handleClose,\"aria-modal\":\"true\",accessibilityRole:\"alert\",accessibilityViewIsModal:true}));};export default memo(forwardRef(AlertDialogContent));","map":{"version":3,"sources":["AlertDialogContent.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","AlertDialogContext","useHasResponsiveProps","AlertDialogContent","props","ref","newProps","contentSize","initialFocusRef","finalFocusRef","handleClose","useContext","useEffect","finalRefVal","current","focus"],"mappings":"uRAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,IAAP,4BACA,OAASC,kBAAT,sBACA,OAASC,kBAAT,iBACA,OAASC,qBAAT,4CAEA,GAAMC,mBAAkB,CAAG,QAArBA,mBAAkB,CAAIC,KAAD,CAAmBC,GAAnB,CAAiC,CAC1D,GAAMC,SAAQ,CAAGN,kBAAkB,CAAC,oBAAD,CAAuBI,KAAvB,CAAnC,CACA,sBAKIR,KAAK,CAACe,UAANf,CAAiBK,kBAAjBL,CALJ,CACEW,WADI,mBACJA,WADI,CAEJC,eAFI,mBAEJA,eAFI,CAGJC,aAHI,mBAGJA,aAHI,CAIJC,WAAAA,mBAAAA,WAAAA,CAEFd,KAAK,CAACgB,SAANhB,CAAgB,UAAM,CACpB,GAAMiB,YAAW,CAAGJ,aAAa,CAAGA,aAAa,CAACK,OAAjB,CAA2B,IAA5D,CACA,GAAIN,eAAe,EAAIA,eAAe,CAACM,OAAvC,CAAgD,CAE9CN,eAAe,CAACM,OAAhBN,CAAwBO,KAAxBP,EAAAA,CACD,CAED,MAAO,WAAM,CACX,GAAIK,WAAJ,CAAiB,CAEfA,WAAW,CAACE,KAAZF,EAAAA,CACD,CACF,CALD,CAMD,CAbDjB,CAaG,CAACY,eAAD,CAAkBC,aAAlB,CAbHb,CAR0D,CAwB1D,GAAIM,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,MAAA,CAAA,aAAA,CAAC,GAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMG,WADN,CAEMD,QAFN,CAAA,CAGE,GAAG,CAAED,GAHP,CAIE,qBAAqB,CAAEK,WAJzB,CAME,YAAA,CAAW,MANb,CAQE,iBAAiB,CAAC,OARpB,CASE,wBAAwB,CAAA,IAT1B,CAAA,CAAA,CADF,CAaD,CAxCD,CA0CA,cAAeb,KAAI,CAACC,UAAU,CAACK,kBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]},"metadata":{},"sourceType":"module"}