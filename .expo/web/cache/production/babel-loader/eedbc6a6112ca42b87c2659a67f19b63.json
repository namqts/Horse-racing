{"ast":null,"code":"import{useTheme}from\"./useTheme\";export function useResolvedFontFamily(props){var fontFamily=props.fontFamily,fontStyle=props.fontStyle,fontWeight=props.fontWeight;var newFontFamily=fontFamily;var newFontStyle=fontStyle;var newFontWeight=fontWeight;var _useTheme=useTheme(),fontConfig=_useTheme.fontConfig,fontWeights=_useTheme.fontWeights,fonts=_useTheme.fonts;if(fontWeight&&fontStyle&&fontFamily&&fontFamily in fonts){var fontToken=fonts[fontFamily];if(fontConfig&&fontConfig[fontToken]){newFontWeight=undefined;newFontStyle=undefined;var fontWeightNumber=fontWeight in fontWeights?fontWeights[fontWeight]:fontWeight;var fontVariant=fontConfig[fontToken][fontWeightNumber];if(typeof fontVariant==='object'){if(fontVariant[fontStyle])newFontFamily=fontVariant[fontStyle];}else{newFontFamily=fontVariant;}}else{newFontFamily=fonts[fontFamily];}}return{fontFamily:newFontFamily,fontWeight:newFontWeight,fontStyle:newFontStyle};}","map":{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["useTheme","useResolvedFontFamily","props","fontFamily","fontStyle","fontWeight","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","undefined","fontWeightNumber","fontVariant"],"mappings":"AAAA,OAASA,QAAT,kBAWA,MAAO,SAASC,sBAAT,CAA+BC,KAA/B,CAIJ,CACD,GAAQC,WAAF,CAAwCD,KAA9C,CAAQC,UAAF,CAAcC,SAAd,CAAwCF,KAA9C,CAAoBE,SAAd,CAAyBC,UAAAA,CAAeH,KAA9C,CAA+BG,UAAAA,CAC/B,GAAIC,cAAa,CAAGH,UAApB,CACA,GAAII,aAAY,CAAGH,SAAnB,CACA,GAAII,cAAa,CAAGH,UAApB,CAEA,cAA2CL,QAAQ,EAAnD,CAAQS,UAAF,WAAEA,UAAF,CAAcC,WAAd,WAAcA,WAAd,CAA2BC,KAAAA,WAAAA,KAAAA,CACjC,GAAIN,UAAU,EAAID,SAAdC,EAA2BF,UAA3BE,EAAyCF,UAAU,GAAIQ,MAA3D,CAAkE,CAEhE,GAAMC,UAAc,CAAGD,KAAK,CAACR,UAAD,CAA5B,CACA,GAAIM,UAAU,EAAIA,UAAU,CAACG,SAAD,CAA5B,CAAyC,CAKvCJ,aAAa,CAAGK,SALuB,CAOvCN,YAAY,CAAGM,SAAfN,CAEA,GAAIO,iBAAgB,CAClBT,UAAU,GAAIK,YAAdL,CAA4BK,WAAW,CAACL,UAAD,CAAvCA,CAAsDA,UADxD,CAEA,GAAIU,YAAW,CAAGN,UAAU,CAACG,SAAD,CAAVH,CAAsBK,gBAAtBL,CAAlB,CAEA,GAAI,MAAOM,YAAP,GAAuB,QAA3B,CAAqC,CACnC,GAAIA,WAAW,CAACX,SAAD,CAAf,CAA4BE,aAAa,CAAGS,WAAW,CAACX,SAAD,CAA3BE,CAC7B,CAFD,IAEO,CACLA,aAAa,CAAGS,WAAhBT,CACD,CACF,CAlBD,IAkBO,CACLA,aAAa,CAAGK,KAAK,CAACR,UAAD,CAArBG,CACD,CACF,CAED,MAAO,CACLH,UAAU,CAAEG,aADP,CAELD,UAAU,CAAEG,aAFP,CAGLJ,SAAS,CAAEG,YAHN,CAAP,CAKD","sourcesContent":["import { useTheme } from './useTheme';\nimport type { ITheme } from '../theme';\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: keyof ITheme['fonts'];\n  fontStyle?: string;\n  fontWeight?: keyof ITheme['fontWeights'];\n}) {\n  const { fontFamily, fontStyle, fontWeight } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken: any = fonts[fontFamily];\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}