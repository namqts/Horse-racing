{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useControlledState}from\"@react-stately/utils\";export function useToggleState(props){if(props===void 0){props={};}var _props=props,isReadOnly=_props.isReadOnly,onChange=_props.onChange;var _useControlledState=useControlledState(props.isSelected,props.defaultSelected||false,function(){}),_useControlledState2=_slicedToArray(_useControlledState,2),isSelected=_useControlledState2[0],setSelected=_useControlledState2[1];function updateSelected(value){if(!isReadOnly){setSelected(value);if(onChange){onChange(value);}}}function toggleState(){if(!isReadOnly){setSelected(function(prev){var newVal=!prev;if(onChange){onChange(newVal);}return newVal;});}}return{isSelected:isSelected,setSelected:updateSelected,toggle:toggleState};}","map":{"version":3,"sources":["packages/@react-stately/toggle/src/useToggleState.ts"],"names":["useToggleState","props","isReadOnly","onChange","isSelected","setSelected","useControlledState","defaultSelected","updateSelected","value","toggleState","prev","newVal","toggle"],"mappings":"4HA6BO,SAASA,eAAT,CAAwBC,KAAxB,CAA8D,CAAA,GAAtCA,KAAsC,GAAA,IAAA,EAAA,CAAA,CAAtCA,KAAsC,CAAjB,CAAA,CAAiB,CAAA,CACnE,WAA6BA,KADsC,CAC9DC,UAAD,QAACA,UAAD,CAAaC,QAAAA,QAAAA,QAAAA,CAIjB,wBAAgCG,kBAAkB,CAACL,KAAK,CAACG,UAAP,CAAmBH,KAAK,CAACM,eAANN,EAAyB,KAA5C,CAAmD,UAAM,CAAE,CAA3D,CAAlD,4DAAKG,UAAD,yBAAaC,WAAb,yBAEJ,QAASG,eAAT,CAAwBC,KAAxB,CAA+B,CAC7B,GAAI,CAACP,UAAL,CAAiB,CACfG,WAAW,CAACI,KAAD,CAAXJ,CACA,GAAIF,QAAJ,CAAc,CACZA,QAAQ,CAACM,KAAD,CAARN,CACD,CACF,CACF,CAED,QAASO,YAAT,EAAuB,CACrB,GAAI,CAACR,UAAL,CAAiB,CACfG,WAAW,CAACM,SAAAA,IAAI,CAAI,CAClB,GAAIC,OAAM,CAAG,CAACD,IAAd,CACA,GAAIR,QAAJ,CAAc,CACZA,QAAQ,CAACS,MAAD,CAART,CACD,CACD,MAAOS,OAAP,CACD,CANU,CAAXP,CAOD,CACF,CAED,MAAO,CACLD,UADK,CACLA,UADK,CAELC,WAAW,CAAEG,cAFR,CAGLK,MAAM,CAAEH,WAHH,CAAP,CAKD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n  \n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly, onChange} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, () => {});\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(prev => {\n        let newVal = !prev;\n        if (onChange) {\n          onChange(newVal);\n        }\n        return newVal;\n      });\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"]},"metadata":{},"sourceType":"module"}