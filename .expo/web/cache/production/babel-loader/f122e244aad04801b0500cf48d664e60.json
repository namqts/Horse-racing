{"ast":null,"code":"import{handleException,SyntheticError}from\"./ExceptionsManager\";function showErrorDialog(capturedError){var componentStack=capturedError.componentStack,error=capturedError.error;var errorToHandle;if(error instanceof Error){errorToHandle=error;}else if(typeof error==='string'){errorToHandle=new SyntheticError(error);}else{errorToHandle=new SyntheticError('Unspecified error');}try{errorToHandle.componentStack=componentStack;errorToHandle.isComponentError=true;}catch(e){}handleException(errorToHandle,false);return false;}module.exports={showErrorDialog:showErrorDialog};","map":{"version":3,"names":["handleException","SyntheticError","showErrorDialog","capturedError","componentStack","error","errorToHandle","Error","isComponentError","e","module","exports"],"sources":["D:/Horse-racing/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\nimport {handleException, SyntheticError} from './ExceptionsManager';\n\n/**\n * Intercept lifecycle errors and ensure they are shown with the correct stack\n * trace within the native redbox component.\n */\nfunction showErrorDialog(capturedError: CapturedError): boolean {\n  const {componentStack, error} = capturedError;\n\n  let errorToHandle;\n\n  // Typically Errors are thrown but eg strings or null can be thrown as well.\n  if (error instanceof Error) {\n    errorToHandle = (error: ExtendedError);\n  } else if (typeof error === 'string') {\n    errorToHandle = (new SyntheticError(error): ExtendedError);\n  } else {\n    errorToHandle = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n  handleException(errorToHandle, false);\n\n  // Return false here to prevent ReactFiberErrorLogger default behavior of\n  // logging error details to console.error. Calls to console.error are\n  // automatically routed to the native redbox controller, which we've already\n  // done above by calling ExceptionsManager.\n  return false;\n}\n\nmodule.exports = {showErrorDialog};\n"],"mappings":"AAmBA,OAAQA,eAAe,CAAEC,cAAc,2BAMvC,QAASC,gBAAe,CAACC,aAA4B,CAAW,CAC9D,GAAOC,eAAc,CAAWD,aAAa,CAAtCC,cAAc,CAAEC,KAAK,CAAIF,aAAa,CAAtBE,KAAK,CAE5B,GAAIC,cAAa,CAGjB,GAAID,KAAK,WAAYE,MAAK,CAAE,CAC1BD,aAAa,CAAID,KAAqB,CACxC,CAAC,IAAM,IAAI,MAAOA,MAAK,GAAK,QAAQ,CAAE,CACpCC,aAAa,CAAI,GAAIL,eAAc,CAACI,KAAK,CAAiB,CAC5D,CAAC,IAAM,CACLC,aAAa,CAAI,GAAIL,eAAc,CAAC,mBAAmB,CAAiB,CAC1E,CACA,GAAI,CACFK,aAAa,CAACF,cAAc,CAAGA,cAAc,CAC7CE,aAAa,CAACE,gBAAgB,CAAG,IAAI,CACvC,CAAE,MAAOC,CAAC,CAAE,CAAC,CACbT,eAAe,CAACM,aAAa,CAAE,KAAK,CAAC,CAMrC,MAAO,MAAK,CACd,CAEAI,MAAM,CAACC,OAAO,CAAG,CAACT,eAAe,CAAfA,eAAe,CAAC"},"metadata":{},"sourceType":"module"}