{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nvar isNative = !shouldBeUseWeb();\nexport var measure = function () {\n  var _f = function _f(animatedRef) {\n    if (!isNative) {\n      console.warn('[Reanimated] measure() cannot be used on web or Chrome Debugger');\n      return null;\n    }\n    if (!_WORKLET) {\n      console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' + 'only available in the UI runtime. This may also happen if measure() ' + 'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' + 'calls the given worklet on the JS runtime during render. If you want to ' + 'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' + 'only be called on the UI runtime after the render has been completed.');\n      return null;\n    }\n    var viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    }\n    var measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response\");\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n      return null;\n    } else {\n      return measured;\n    }\n  };\n  _f._closure = {\n    isNative: isNative\n  };\n  _f.asString = \"function measure(animatedRef){const{isNative}=jsThis._closure;{if(!isNative){console.warn('[Reanimated] measure() cannot be used on web or Chrome Debugger');return null;}if(!_WORKLET){console.warn('[Reanimated] measure() was called from the main JS context. Measure is '+'only available in the UI runtime. This may also happen if measure() '+'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle '+'calls the given worklet on the JS runtime during render. If you want to '+'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will '+'only be called on the UI runtime after the render has been completed.');return null;}const viewTag=animatedRef();if(viewTag===-1){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}const measured=_measure(viewTag);if(measured===null){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}else if(measured.x===-1234567){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" returned an invalid measurement response\\\");return null;}else if(isNaN(measured.x)){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\\\");return null;}else{return measured;}}}\";\n  _f.__workletHash = 11687717278546;\n  _f.__location = \"D:\\\\Horse-racing\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (7:7)\";\n  return _f;\n}();\nexport var scrollTo = function () {\n  var _f = function _f(animatedRef, x, y, animated) {\n    if (!_WORKLET || !isNative) {\n      return;\n    }\n    var viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n  };\n  _f._closure = {\n    isNative: isNative\n  };\n  _f.asString = \"function scrollTo(animatedRef,x,y,animated){const{isNative}=jsThis._closure;{if(!_WORKLET||!isNative){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}}\";\n  _f.__workletHash = 3415356684899;\n  _f.__location = \"D:\\\\Horse-racing\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (44:7)\";\n  return _f;\n}();\nexport var setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET || !isNative) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n      return;\n    }\n    _setGestureState(handlerTag, newState);\n  };\n  _f._closure = {\n    isNative: isNative\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isNative}=jsThis._closure;{if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 11162109634360;\n  _f.__location = \"D:\\\\Horse-racing\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (52:7)\";\n  return _f;\n}();","map":{"version":3,"names":["shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","x","isNaN","scrollTo","y","animated","_scrollTo","setGestureState","handlerTag","newState","_setGestureState"],"sources":["D:/Horse-racing/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { shouldBeUseWeb } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nconst isNative = !shouldBeUseWeb();\nexport function measure(animatedRef) {\n    'worklet';\n    if (!isNative) {\n        console.warn('[Reanimated] measure() cannot be used on web or Chrome Debugger');\n        return null;\n    }\n    if (!_WORKLET) {\n        console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' +\n            'only available in the UI runtime. This may also happen if measure() ' +\n            'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n            'calls the given worklet on the JS runtime during render. If you want to ' +\n            'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n            'only be called on the UI runtime after the render has been completed.');\n        return null;\n    }\n    const viewTag = animatedRef();\n    if (viewTag === -1) {\n        console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n        return null;\n    }\n    const measured = _measure(viewTag);\n    if (measured === null) {\n        console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n        return null;\n    }\n    else if (measured.x === -1234567) {\n        console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response`);\n        return null;\n    }\n    else if (isNaN(measured.x)) {\n        console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);\n        return null;\n    }\n    else {\n        return measured;\n    }\n}\nexport function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n    if (!_WORKLET || !isNative) {\n        return;\n    }\n    const viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET || !isNative) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n        return;\n    }\n    _setGestureState(handlerTag, newState);\n}\n"],"mappings":";AACA,SAASA,cAAc;AACvB,OAAO,SAASC,MAAM,CAACC,IAAI,EAAE;EACzB,OAAOC,cAAc,CAACD,IAAI,CAAC;AAC/B;AACA,IAAME,QAAQ,GAAG,CAACJ,cAAc,EAAE;AAClC,WAAgBK,OAAO;EAAA,qBAACC,WAAW,EAAE;IAEjC,IAAI,CAACF,QAAQ,EAAE;MACXG,OAAO,CAACC,IAAI,CAAC,iEAAiE,CAAC;MAC/E,OAAO,IAAI;IACf;IACA,IAAI,CAACC,QAAQ,EAAE;MACXF,OAAO,CAACC,IAAI,CAAC,yEAAyE,GAClF,sEAAsE,GACtE,iFAAiF,GACjF,0EAA0E,GAC1E,6EAA6E,GAC7E,uEAAuE,CAAC;MAC5E,OAAO,IAAI;IACf;IACA,IAAME,OAAO,GAAGJ,WAAW,EAAE;IAC7B,IAAII,OAAO,KAAK,CAAC,CAAC,EAAE;MAChBH,OAAO,CAACC,IAAI,qCAAmCE,OAAO,gKAA6J;MACnN,OAAO,IAAI;IACf;IACA,IAAMC,QAAQ,GAAGC,QAAQ,CAACF,OAAO,CAAC;IAClC,IAAIC,QAAQ,KAAK,IAAI,EAAE;MACnBJ,OAAO,CAACC,IAAI,qCAAmCE,OAAO,4MAA2M;MACjQ,OAAO,IAAI;IACf,CAAC,MACI,IAAIC,QAAQ,CAACE,CAAC,KAAK,CAAC,OAAO,EAAE;MAC9BN,OAAO,CAACC,IAAI,qCAAmCE,OAAO,+CAA4C;MAClG,OAAO,IAAI;IACf,CAAC,MACI,IAAII,KAAK,CAACH,QAAQ,CAACE,CAAC,CAAC,EAAE;MACxBN,OAAO,CAACC,IAAI,qCAAmCE,OAAO,+GAA8G;MACpK,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAOC,QAAQ;IACnB;EACJ,CAAC;EAAA;IAAA,UAxCMP;EAAQ;EAAA;EAAA;EAAA;EAAA;AAAA;AAyCf,WAAgBW,QAAQ;EAAA,qBAACT,WAAW,EAAEO,CAAC,EAAEG,CAAC,EAAEC,QAAQ,EAAE;IAElD,IAAI,CAACR,QAAQ,IAAI,CAACL,QAAQ,EAAE;MACxB;IACJ;IACA,IAAMM,OAAO,GAAGJ,WAAW,EAAE;IAC7BY,SAAS,CAACR,OAAO,EAAEG,CAAC,EAAEG,CAAC,EAAEC,QAAQ,CAAC;EACtC,CAAC;EAAA;IAAA,UAhDmBb;EAAQ;EAAA;EAAA;EAAA;EAAA;AAAA;AAiD5B,WAAgBe,eAAe;EAAA,qBAACC,UAAU,EAAEC,QAAQ,EAAE;IAElD,IAAI,CAACZ,QAAQ,IAAI,CAACL,QAAQ,EAAE;MACxBG,OAAO,CAACC,IAAI,CAAC,uEAAuE,CAAC;MACrF;IACJ;IACAc,gBAAgB,CAACF,UAAU,EAAEC,QAAQ,CAAC;EAC1C,CAAC;EAAA;IAAA,UAxDmBjB;EAAQ;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}