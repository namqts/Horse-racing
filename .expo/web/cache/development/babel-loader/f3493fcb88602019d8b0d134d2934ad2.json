{"ast":null,"code":"\n\n'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar SyntheticError = function (_Error) {\n  _inherits(SyntheticError, _Error);\n  var _super = _createSuper(SyntheticError);\n  function SyntheticError() {\n    var _this;\n    _classCallCheck(this, SyntheticError);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.name = '';\n    return _this;\n  }\n  return _createClass(SyntheticError);\n}(_wrapNativeSuper(Error));\nvar userExceptionDecorator;\nvar inUserExceptionDecorator = false;\n\nfunction unstable_setExceptionDecorator(exceptionDecorator) {\n  userExceptionDecorator = exceptionDecorator;\n}\nfunction preprocessException(data) {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch (_unused) {\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\nvar exceptionID = 0;\nfunction reportException(e, isFatal, reportToConsole) {\n  var NativeExceptionsManager = require(\"./NativeExceptionsManager\").default;\n  if (NativeExceptionsManager) {\n    var parseErrorStack = require(\"./Devtools/parseErrorStack\");\n    var stack = parseErrorStack(e === null || e === void 0 ? void 0 : e.stack);\n    var currentExceptionID = ++exceptionID;\n    var originalMessage = e.message || '';\n    var message = originalMessage;\n    if (e.componentStack != null) {\n      message += \"\\n\\nThis error is located at:\" + e.componentStack;\n    }\n    var namePrefix = e.name == null || e.name === '' ? '' : e.name + \": \";\n    if (!message.startsWith(namePrefix)) {\n      message = namePrefix + message;\n    }\n    message = e.jsEngine == null ? message : message + \", js engine: \" + e.jsEngine;\n    var isHandledByLogBox = e.forceRedbox !== true && !global.RN$Bridgeless && !global.RN$Express;\n    var data = preprocessException({\n      message: message,\n      originalMessage: message === originalMessage ? null : originalMessage,\n      name: e.name == null || e.name === '' ? null : e.name,\n      componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,\n      stack: stack,\n      id: currentExceptionID,\n      isFatal: isFatal,\n      extraData: {\n        jsEngine: e.jsEngine,\n        rawStack: e.stack,\n        suppressRedBox: isHandledByLogBox\n      }\n    });\n    if (reportToConsole) {\n      console.error(data.message);\n    }\n    if (__DEV__ && isHandledByLogBox) {\n      var LogBoxData = require(\"../LogBox/Data/LogBoxData\");\n      LogBoxData.addException(_objectSpread(_objectSpread({}, data), {}, {\n        isComponentError: !!e.isComponentError\n      }));\n    }\n    NativeExceptionsManager.reportException(data);\n    if (__DEV__ && !global.RN$Express) {\n      if (e.preventSymbolication === true) {\n        return;\n      }\n      var symbolicateStackTrace = require(\"./Devtools/symbolicateStackTrace\");\n      symbolicateStackTrace(stack).then(function (_ref) {\n        var prettyStack = _ref.stack;\n        if (prettyStack) {\n          NativeExceptionsManager.updateExceptionMessage(data.message, prettyStack, currentExceptionID);\n        } else {\n          throw new Error('The stack is null');\n        }\n      }).catch(function (error) {\n        console.log('Unable to symbolicate stack trace: ' + error.message);\n      });\n    }\n  } else if (reportToConsole) {\n    console.error(e);\n  }\n}\nvar inExceptionHandler = false;\n\nfunction handleException(e, isFatal) {\n  var error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    reportException(error, isFatal, true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    return;\n  }\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], false, false);\n  } else {\n    var stringifySafe = require(\"../Utilities/stringifySafe\").default;\n    var str = Array.prototype.map.call(arguments, function (value) {\n      return typeof value === 'string' ? value : stringifySafe(value);\n    }).join(' ');\n    if (str.slice(0, 9) === 'Warning: ') {\n      return;\n    }\n    var _error = new SyntheticError(str);\n    _error.name = 'console.error';\n    reportException(_error, false, false);\n  }\n}\n\nfunction installConsoleErrorReporter() {\n  if (console._errorOriginal) {\n    return;\n  }\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    console.reportErrorsAsExceptions = true;\n  }\n}\nmodule.exports = {\n  handleException: handleException,\n  installConsoleErrorReporter: installConsoleErrorReporter,\n  SyntheticError: SyntheticError,\n  unstable_setExceptionDecorator: unstable_setExceptionDecorator\n};","map":{"version":3,"names":["SyntheticError","name","Error","userExceptionDecorator","inUserExceptionDecorator","unstable_setExceptionDecorator","exceptionDecorator","preprocessException","data","exceptionID","reportException","e","isFatal","reportToConsole","NativeExceptionsManager","require","default","parseErrorStack","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","startsWith","jsEngine","isHandledByLogBox","forceRedbox","global","RN$Bridgeless","RN$Express","id","extraData","rawStack","suppressRedBox","console","error","__DEV__","LogBoxData","addException","isComponentError","preventSymbolication","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","catch","log","inExceptionHandler","handleException","reactConsoleErrorHandler","_errorOriginal","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","value","join","slice","installConsoleErrorReporter","bind","undefined","module","exports"],"sources":["D:/Horse-racing/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\nimport type {ExceptionData} from './NativeExceptionsManager';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\ntype ExceptionDecorator = ExceptionData => ExceptionData;\n\nlet userExceptionDecorator: ?ExceptionDecorator;\nlet inUserExceptionDecorator = false;\n\n/**\n * Allows the app to add information to the exception report before it is sent\n * to native. This API is not final.\n */\n\nfunction unstable_setExceptionDecorator(\n  exceptionDecorator: ?ExceptionDecorator,\n) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data: ExceptionData): ExceptionData {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {\n      // Fall through\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(\n  e: ExtendedError,\n  isFatal: boolean,\n  reportToConsole: boolean, // only true when coming from handleException; the error has not yet been logged\n) {\n  const NativeExceptionsManager = require('./NativeExceptionsManager').default;\n  if (NativeExceptionsManager) {\n    const parseErrorStack = require('./Devtools/parseErrorStack');\n    const stack = parseErrorStack(e?.stack);\n    const currentExceptionID = ++exceptionID;\n    const originalMessage = e.message || '';\n    let message = originalMessage;\n    if (e.componentStack != null) {\n      message += `\\n\\nThis error is located at:${e.componentStack}`;\n    }\n    const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n\n    if (!message.startsWith(namePrefix)) {\n      message = namePrefix + message;\n    }\n\n    message =\n      e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n\n    const isHandledByLogBox =\n      e.forceRedbox !== true && !global.RN$Bridgeless && !global.RN$Express;\n\n    const data = preprocessException({\n      message,\n      originalMessage: message === originalMessage ? null : originalMessage,\n      name: e.name == null || e.name === '' ? null : e.name,\n      componentStack:\n        typeof e.componentStack === 'string' ? e.componentStack : null,\n      stack,\n      id: currentExceptionID,\n      isFatal,\n      extraData: {\n        jsEngine: e.jsEngine,\n        rawStack: e.stack,\n\n        // Hack to hide native redboxes when in the LogBox experiment.\n        // This is intentionally untyped and stuffed here, because it is temporary.\n        suppressRedBox: isHandledByLogBox,\n      },\n    });\n\n    if (reportToConsole) {\n      // we feed back into console.error, to make sure any methods that are\n      // monkey patched on top of console.error are called when coming from\n      // handleException\n      console.error(data.message);\n    }\n\n    if (__DEV__ && isHandledByLogBox) {\n      const LogBoxData = require('../LogBox/Data/LogBoxData');\n      LogBoxData.addException({\n        ...data,\n        isComponentError: !!e.isComponentError,\n      });\n    }\n\n    NativeExceptionsManager.reportException(data);\n\n    if (__DEV__ && !global.RN$Express) {\n      if (e.preventSymbolication === true) {\n        return;\n      }\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(({stack: prettyStack}) => {\n          if (prettyStack) {\n            NativeExceptionsManager.updateExceptionMessage(\n              data.message,\n              prettyStack,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error => {\n          console.log('Unable to symbolicate stack trace: ' + error.message);\n        });\n    }\n  } else if (reportToConsole) {\n    // we feed back into console.error, to make sure any methods that are\n    // monkey patched on top of console.error are called when coming from\n    // handleException\n    console.error(e);\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: typeof console.error,\n  reportErrorsAsExceptions: boolean,\n  ...\n};\n\n// If we trigger console.error _from_ handleException,\n// we do want to make sure that console.error doesn't trigger error reporting again\nlet inExceptionHandler = false;\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    reportException(error, isFatal, /*reportToConsole*/ true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\n\nfunction reactConsoleErrorHandler() {\n  // bubble up to any original handlers\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    // The fundamental trick here is that are multiple entry point to logging errors:\n    // (see D19743075 for more background)\n    //\n    // 1. An uncaught exception being caught by the global handler\n    // 2. An error being logged throw console.error\n    //\n    // However, console.error is monkey patched multiple times: by this module, and by the\n    // DevTools setup that sends messages to Metro.\n    // The patching order cannot be relied upon.\n    //\n    // So, some scenarios that are handled by this flag:\n    //\n    // Logging an error:\n    // 1. console.error called from user code\n    // 2. (possibly) arrives _first_ at DevTool handler, send to Metro\n    // 3. Bubbles to here\n    // 4. goes into report Exception.\n    // 5. should not trigger console.error again, to avoid looping / logging twice\n    // 6. should still bubble up to original console\n    //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)\n    //\n    // Throwing an uncaught exception:\n    // 1. exception thrown\n    // 2. picked up by handleException\n    // 3. should be send to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)\n    // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here\n    //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)\n    // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    // reportException will console.error this with high enough fidelity.\n    reportException(\n      arguments[0],\n      /* isFatal */ false,\n      /*reportToConsole*/ false,\n    );\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe').default;\n    const str = Array.prototype.map\n      .call(arguments, value =>\n        typeof value === 'string' ? value : stringifySafe(value),\n      )\n      .join(' ');\n\n    if (str.slice(0, 9) === 'Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new SyntheticError(str);\n    error.name = 'console.error';\n    reportException(error, /* isFatal */ false, /*reportToConsole*/ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}