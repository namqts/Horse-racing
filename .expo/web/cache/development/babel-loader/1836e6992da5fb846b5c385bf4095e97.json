{"ast":null,"code":"\n\n'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport EventEmitter from \"../vendor/emitter/EventEmitter\";\nimport RCTDeviceEventEmitter from \"../EventEmitter/RCTDeviceEventEmitter\";\nimport NativeDeviceInfo from \"./NativeDeviceInfo\";\nimport invariant from 'invariant';\nvar eventEmitter = new EventEmitter();\nvar dimensionsInitialized = false;\nvar dimensions;\nvar Dimensions = function () {\n  function Dimensions() {\n    _classCallCheck(this, Dimensions);\n  }\n  _createClass(Dimensions, null, [{\n    key: \"get\",\n    value:\n    function get(dim) {\n      invariant(dimensions[dim], 'No dimension set for key ' + dim);\n      return dimensions[dim];\n    }\n\n  }, {\n    key: \"set\",\n    value:\n    function set(dims) {\n      var screen = dims.screen,\n        window = dims.window;\n      var windowPhysicalPixels = dims.windowPhysicalPixels;\n      if (windowPhysicalPixels) {\n        window = {\n          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n          scale: windowPhysicalPixels.scale,\n          fontScale: windowPhysicalPixels.fontScale\n        };\n      }\n      var screenPhysicalPixels = dims.screenPhysicalPixels;\n      if (screenPhysicalPixels) {\n        screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale\n        };\n      } else if (screen == null) {\n        screen = window;\n      }\n      dimensions = {\n        window: window,\n        screen: screen\n      };\n      if (dimensionsInitialized) {\n        eventEmitter.emit('change', dimensions);\n      } else {\n        dimensionsInitialized = true;\n      }\n    }\n\n  }, {\n    key: \"addEventListener\",\n    value:\n    function addEventListener(type, handler) {\n      invariant(type === 'change', 'Trying to subscribe to unknown event: \"%s\"', type);\n      eventEmitter.addListener(type, handler);\n    }\n\n  }, {\n    key: \"removeEventListener\",\n    value:\n    function removeEventListener(type, handler) {\n      invariant(type === 'change', 'Trying to remove listener for unknown event: \"%s\"', type);\n      eventEmitter.removeListener(type, handler);\n    }\n  }]);\n  return Dimensions;\n}();\nvar initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {\n    Dimensions.set(update);\n  });\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\nDimensions.set(initialDims);\nmodule.exports = Dimensions;","map":{"version":3,"names":["EventEmitter","RCTDeviceEventEmitter","NativeDeviceInfo","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dim","dims","screen","window","windowPhysicalPixels","width","scale","height","fontScale","screenPhysicalPixels","emit","type","handler","addListener","removeListener","initialDims","global","nativeExtensions","DeviceInfo","update","set","getConstants","module","exports"],"sources":["D:/Horse-racing/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeDeviceInfo, {\n  type DisplayMetrics,\n  type DimensionsPayload,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\ntype DimensionsValue = {\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  ...\n};\n\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsValue;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preffered API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<{[key: string]: any, ...}>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(type: 'change', handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(type: 'change', handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet initialDims: ?$ReadOnly<{[key: string]: any, ...}> =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  RCTDeviceEventEmitter.addListener(\n    'didUpdateDimensions',\n    (update: DimensionsPayload) => {\n      Dimensions.set(update);\n    },\n  );\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\n\nmodule.exports = Dimensions;\n"],"mappings":";;AAUA,YAAY;;AAAC;AAAA;AAEb,OAAOA,YAAY;AACnB,OAAOC,qBAAqB;AAC5B,OAAOC,gBAAgB;AAIvB,OAAOC,SAAS,MAAM,WAAW;AAQjC,IAAMC,YAAY,GAAG,IAAIJ,YAAY,EAAE;AACvC,IAAIK,qBAAqB,GAAG,KAAK;AACjC,IAAIC,UAA2B;AAAC,IAE1BC,UAAU;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAkBd,aAAWC,GAAW,EAAU;MAC9BL,SAAS,CAACG,UAAU,CAACE,GAAG,CAAC,EAAE,2BAA2B,GAAGA,GAAG,CAAC;MAC7D,OAAOF,UAAU,CAACE,GAAG,CAAC;IACxB;;EAAC;IAAA;IAAA;IAQD,aAAWC,IAA0C,EAAQ;MAI3D,IAAKC,MAAM,GAAYD,IAAI,CAAtBC,MAAM;QAAEC,MAAM,GAAIF,IAAI,CAAdE,MAAM;MACnB,IAAOC,oBAAoB,GAAIH,IAAI,CAA5BG,oBAAoB;MAC3B,IAAIA,oBAAoB,EAAE;QACxBD,MAAM,GAAG;UACPE,KAAK,EAAED,oBAAoB,CAACC,KAAK,GAAGD,oBAAoB,CAACE,KAAK;UAC9DC,MAAM,EAAEH,oBAAoB,CAACG,MAAM,GAAGH,oBAAoB,CAACE,KAAK;UAChEA,KAAK,EAAEF,oBAAoB,CAACE,KAAK;UACjCE,SAAS,EAAEJ,oBAAoB,CAACI;QAClC,CAAC;MACH;MACA,IAAOC,oBAAoB,GAAIR,IAAI,CAA5BQ,oBAAoB;MAC3B,IAAIA,oBAAoB,EAAE;QACxBP,MAAM,GAAG;UACPG,KAAK,EAAEI,oBAAoB,CAACJ,KAAK,GAAGI,oBAAoB,CAACH,KAAK;UAC9DC,MAAM,EAAEE,oBAAoB,CAACF,MAAM,GAAGE,oBAAoB,CAACH,KAAK;UAChEA,KAAK,EAAEG,oBAAoB,CAACH,KAAK;UACjCE,SAAS,EAAEC,oBAAoB,CAACD;QAClC,CAAC;MACH,CAAC,MAAM,IAAIN,MAAM,IAAI,IAAI,EAAE;QACzBA,MAAM,GAAGC,MAAM;MACjB;MAEAL,UAAU,GAAG;QAACK,MAAM,EAANA,MAAM;QAAED,MAAM,EAANA;MAAM,CAAC;MAC7B,IAAIL,qBAAqB,EAAE;QAEzBD,YAAY,CAACc,IAAI,CAAC,QAAQ,EAAEZ,UAAU,CAAC;MACzC,CAAC,MAAM;QACLD,qBAAqB,GAAG,IAAI;MAC9B;IACF;;EAAC;IAAA;IAAA;IAUD,0BAAwBc,IAAc,EAAEC,OAAiB,EAAE;MACzDjB,SAAS,CACPgB,IAAI,KAAK,QAAQ,EACjB,4CAA4C,EAC5CA,IAAI,CACL;MACDf,YAAY,CAACiB,WAAW,CAACF,IAAI,EAAEC,OAAO,CAAC;IACzC;;EAAC;IAAA;IAAA;IAKD,6BAA2BD,IAAc,EAAEC,OAAiB,EAAE;MAC5DjB,SAAS,CACPgB,IAAI,KAAK,QAAQ,EACjB,mDAAmD,EACnDA,IAAI,CACL;MACDf,YAAY,CAACkB,cAAc,CAACH,IAAI,EAAEC,OAAO,CAAC;IAC5C;EAAC;EAAA;AAAA;AAGH,IAAIG,WAAkD,GACpDC,MAAM,CAACC,gBAAgB,IACvBD,MAAM,CAACC,gBAAgB,CAACC,UAAU,IAClCF,MAAM,CAACC,gBAAgB,CAACC,UAAU,CAACnB,UAAU;AAC/C,IAAI,CAACgB,WAAW,EAAE;EAEhBtB,qBAAqB,CAACoB,WAAW,CAC/B,qBAAqB,EACrB,UAACM,MAAyB,EAAK;IAC7BpB,UAAU,CAACqB,GAAG,CAACD,MAAM,CAAC;EACxB,CAAC,CACF;EACDJ,WAAW,GAAGrB,gBAAgB,CAAC2B,YAAY,EAAE,CAACtB,UAAU;AAC1D;AAEAA,UAAU,CAACqB,GAAG,CAACL,WAAW,CAAC;AAE3BO,MAAM,CAACC,OAAO,GAAGxB,UAAU"},"metadata":{},"sourceType":"module"}