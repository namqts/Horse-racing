{"ast":null,"code":"\n\n'use strict';\n\nimport Platform from \"../Utilities/Platform\";\nvar ReactNativeVersion = require(\"./ReactNativeVersion\");\n\nexports.checkVersions = function checkVersions() {\n  var nativeVersion = Platform.constants.reactNativeVersion;\n  if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {\n    console.error(\"React Native version mismatch.\\n\\nJavaScript version: \" + _formatVersion(ReactNativeVersion.version) + \"\\n\" + (\"Native version: \" + _formatVersion(nativeVersion) + \"\\n\\n\") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');\n  }\n};\nfunction _formatVersion(version) {\n  return version.major + \".\" + version.minor + \".\" + version.patch + (\n  version.prerelease != undefined ? \"-\" + version.prerelease : '');\n}","map":{"version":3,"names":["Platform","ReactNativeVersion","require","exports","checkVersions","nativeVersion","constants","reactNativeVersion","version","major","minor","console","error","_formatVersion","patch","prerelease","undefined"],"sources":["D:/Horse-racing/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport Platform from '../Utilities/Platform';\nconst ReactNativeVersion = require('./ReactNativeVersion');\n\n/**\n * Checks that the version of this React Native JS is compatible with the native\n * code, throwing an error if it isn't.\n *\n * The existence of this module is part of the public interface of React Native\n * even though it is used only internally within React Native. React Native\n * implementations for other platforms (ex: Windows) may override this module\n * and rely on its existence as a separate module.\n */\nexports.checkVersions = function checkVersions(): void {\n  const nativeVersion = Platform.constants.reactNativeVersion;\n  if (\n    ReactNativeVersion.version.major !== nativeVersion.major ||\n    ReactNativeVersion.version.minor !== nativeVersion.minor\n  ) {\n    console.error(\n      `React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(\n        ReactNativeVersion.version,\n      )}\\n` +\n        `Native version: ${_formatVersion(nativeVersion)}\\n\\n` +\n        'Make sure that you have rebuilt the native code. If the problem ' +\n        'persists try clearing the Watchman and packager caches with ' +\n        '`watchman watch-del-all && react-native start --reset-cache`.',\n    );\n  }\n};\n\nfunction _formatVersion(version): string {\n  return (\n    `${version.major}.${version.minor}.${version.patch}` +\n    // eslint-disable-next-line eqeqeq\n    (version.prerelease != undefined ? `-${version.prerelease}` : '')\n  );\n}\n"],"mappings":";;AAUA,YAAY;;AAEZ,OAAOA,QAAQ;AACf,IAAMC,kBAAkB,GAAGC,OAAO,wBAAwB;;AAW1DC,OAAO,CAACC,aAAa,GAAG,SAASA,aAAa,GAAS;EACrD,IAAMC,aAAa,GAAGL,QAAQ,CAACM,SAAS,CAACC,kBAAkB;EAC3D,IACEN,kBAAkB,CAACO,OAAO,CAACC,KAAK,KAAKJ,aAAa,CAACI,KAAK,IACxDR,kBAAkB,CAACO,OAAO,CAACE,KAAK,KAAKL,aAAa,CAACK,KAAK,EACxD;IACAC,OAAO,CAACC,KAAK,CACX,2DAAyDC,cAAc,CACrEZ,kBAAkB,CAACO,OAAO,CAC3B,gCACoBK,cAAc,CAACR,aAAa,CAAC,UAAM,GACtD,kEAAkE,GAClE,8DAA8D,GAC9D,+DAA+D,CAClE;EACH;AACF,CAAC;AAED,SAASQ,cAAc,CAACL,OAAO,EAAU;EACvC,OACKA,OAAO,CAACC,KAAK,SAAID,OAAO,CAACE,KAAK,SAAIF,OAAO,CAACM,KAAK;EAEjDN,OAAO,CAACO,UAAU,IAAIC,SAAS,SAAOR,OAAO,CAACO,UAAU,GAAK,EAAE,CAAC;AAErE"},"metadata":{},"sourceType":"module"}