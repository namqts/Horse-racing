{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar isOrientationPortrait = function isOrientationPortrait(_ref) {\n  var width = _ref.width,\n    height = _ref.height;\n  return height >= width;\n};\nvar isOrientationLandscape = function isOrientationLandscape(_ref2) {\n  var width = _ref2.width,\n    height = _ref2.height;\n  return width >= height;\n};\nexport function useDeviceOrientation() {\n  var screen = Dimensions.get('screen');\n  var initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen)\n  };\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    orientation = _useState2[0],\n    setOrientation = _useState2[1];\n  useEffect(function () {\n    var onChange = function onChange(_ref3) {\n      var screen = _ref3.screen;\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen)\n      });\n    };\n    var subscription = Dimensions.addEventListener('change', onChange);\n    return function () {\n      if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === 'function') {\n        subscription.remove();\n      } else {\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}","map":{"version":3,"sources":["useDeviceOrientation.ts"],"names":["useEffect","useState","isOrientationPortrait","width","height","isOrientationLandscape","useDeviceOrientation","screen","Dimensions","get","initialState","portrait","landscape","orientation","setOrientation","onChange","subscription","addEventListener","remove","removeEventListener"],"mappings":";AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAAA;AAGA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAG,IAAA,EAAA;EAAA,IAAGC,KAAF,GAAD,IAAA,CAAGA,KAAF;IAASC,MAAAA,GAAV,IAAA,CAAUA,MAAAA;EAAV,OAC5BA,MAAM,IAAID,KADkB;AAAA,CAA9B;AAEA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAsB,CAAG,KAAA,EAAA;EAAA,IAAGF,KAAF,GAAD,KAAA,CAAGA,KAAF;IAASC,MAAAA,GAAV,KAAA,CAAUA,MAAAA;EAAV,OAC7BD,KAAK,IAAIC,MADoB;AAAA,CAA/B;AAGA,OAAO,SAASE,oBAAT,GAAgC;EACrC,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAf;EACA,IAAME,YAAY,GAAG;IACnBC,QAAQ,EAAET,qBAAqB,CAACK,MAAD,CADZ;IAEnBK,SAAS,EAAEP,sBAAsB,CAACE,MAAD;EAFd,CAArB;EAKA,gBAAsCN,QAAQ,CAACS,YAAD,CAA9C;IAAA;IAAOG,WAAD;IAAcC,cAAd;EAENd,SAAS,CAAC,YAAM;IACd,IAAMe,QAAQ,GAAG,SAAXA,QAAQ,CAAG,KAAA,EAAwC;MAAvC,IAAER,MAAAA,GAAqC,KAAA,CAArCA,MAAAA;MAClBO,cAAc,CAAC;QACbH,QAAQ,EAAET,qBAAqB,CAACK,MAAD,CADlB;QAEbK,SAAS,EAAEP,sBAAsB,CAACE,MAAD;MAFpB,CAAD,CAAdO;IAID,CALD;IAOA,IAAME,YAAY,GAAGR,UAAU,CAACS,gBAAXT,CAA4B,QAA5BA,EAAsCO,QAAtCP,CAArB;IAEA,OAAO,YAAM;MACX,IAAI,QAAOQ,YAAP,KAAA,IAAA,IAAOA,YAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,YAAY,CAAEE,MAArB,CAAA,KAAgC,UAApC,EAAgD;QAC9CF,YAAY,CAACE,MAAbF,EAAAA;MACD,CAFD,MAEO;QAELR,UAAU,CAACW,mBAAXX,CAA+B,QAA/BA,EAAyCO,QAAzCP,CAAAA;MACD;IACF,CAPD;EAQD,CAlBQ,EAkBN,EAlBM,CAATR;EAoBA,OAAOa,WAAW,CAACF,QAAZE,KAAyB,IAAzBA,GAAgC,UAAhCA,GAA6C,WAApD;AACD","sourcesContent":["/* eslint-disable no-shadow */\nimport { useEffect, useState } from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\nconst isOrientationPortrait = ({ width, height }: ScaledSize) =>\n  height >= width;\nconst isOrientationLandscape = ({ width, height }: ScaledSize) =>\n  width >= height;\n\nexport function useDeviceOrientation() {\n  const screen = Dimensions.get('screen');\n  const initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  };\n\n  const [orientation, setOrientation] = useState(initialState);\n\n  useEffect(() => {\n    const onChange = ({ screen }: { screen: ScaledSize }) => {\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen),\n      });\n    };\n\n    const subscription = Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      if (typeof subscription?.remove === 'function') {\n        subscription.remove();\n      } else {\n        // React Native < 0.65\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}\n"]},"metadata":{},"sourceType":"module"}