{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { styles } from \"./styles\";\nvar ic_close = require(\"../../assets/close.png\");\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false\n};\nvar TextInputComponent = function TextInputComponent(props) {\n  var fontFamily = props.fontFamily,\n    style = props.style,\n    value = props.value,\n    _props$placeholderTex = props.placeholderTextColor,\n    placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n    _props$placeholder = props.placeholder,\n    placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n    showIcon = props.showIcon,\n    inputStyle = props.inputStyle,\n    iconStyle = props.iconStyle,\n    _props$onChangeText = props.onChangeText,\n    onChangeText = _props$onChangeText === void 0 ? function (_value) {} : _props$onChangeText,\n    renderLeftIcon = props.renderLeftIcon,\n    renderRightIcon = props.renderRightIcon;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    text = _useState2[0],\n    setText = _useState2[1];\n  useEffect(function () {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n  var onChange = function onChange(text) {\n    setText(text);\n    onChangeText(text);\n  };\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return onChange('');\n          }\n        }, React.createElement(Image, {\n          source: ic_close,\n          style: [styles.icon, iconStyle]\n        }));\n      }\n      return null;\n    }\n    return null;\n  };\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n  return React.createElement(TouchableWithoutFeedback, null, React.createElement(View, {\n    style: [style]\n  }, React.createElement(View, {\n    style: styles.textInput\n  }, renderLeftIcon === null || renderLeftIcon === void 0 ? void 0 : renderLeftIcon(), React.createElement(TextInput, _extends({}, props, {\n    style: [styles.input, inputStyle, font()],\n    value: text,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    onChangeText: onChange\n  })), _renderRightIcon())));\n};\nTextInputComponent.defaultProps = defaultProps;\nexport default TextInputComponent;","map":{"version":3,"sources":["index.tsx"],"names":["React","useEffect","useState","styles","ic_close","require","defaultProps","style","value","showIcon","currency","numeric","TextInputComponent","props","fontFamily","placeholderTextColor","placeholder","inputStyle","iconStyle","onChangeText","_value","renderLeftIcon","renderRightIcon","text","setText","onChange","_renderRightIcon","length","icon","font","textInput","input"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Image,\n  TextInput,\n  TouchableOpacity,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport type { CTextInput } from './model';\nimport { styles } from './styles';\n\nconst ic_close = require('../../assets/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false,\n};\n\nconst TextInputComponent: CTextInput = (props) => {\n  const {\n    fontFamily,\n    style,\n    value,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    inputStyle,\n    iconStyle,\n    onChangeText = (_value: string) => {},\n    renderLeftIcon,\n    renderRightIcon,\n  } = props;\n\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n\n  const onChange = (text: string) => {\n    setText(text);\n    onChangeText(text);\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return (\n          <TouchableOpacity onPress={() => onChange('')}>\n            <Image source={ic_close} style={[styles.icon, iconStyle]} />\n          </TouchableOpacity>\n        );\n      }\n      return null;\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  return (\n    <TouchableWithoutFeedback>\n      <View style={[style]}>\n        <View style={styles.textInput}>\n          {renderLeftIcon?.()}\n          <TextInput\n            {...props}\n            style={[styles.input, inputStyle, font()]}\n            value={text}\n            placeholder={placeholder}\n            placeholderTextColor={placeholderTextColor}\n            onChangeText={onChange}\n          />\n          {_renderRightIcon()}\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nTextInputComponent.defaultProps = defaultProps;\n\nexport default TextInputComponent;\n"]},"metadata":{},"sourceType":"module"}